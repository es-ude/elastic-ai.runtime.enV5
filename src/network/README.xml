<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc?>
<?asciidoc-numbered?>
<article xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>Network Stack</title>
<date>1980-01-01</date>
</info>
<section xml:id="_hardware">
<title>Hardware</title>
<simpara>Based on <phrase role="underline">espressif ESP32-C3-WROOM-02</phrase> wifi-module The module is placed on the extension board and connected to the MCU via SPI.</simpara>
<simpara>The module currently operates based on the standard espressif binary, which based communication with MCU on the <link linkend="_esp_protocol">ESP Protocol</link>.</simpara>
<tip>
<simpara><link xl:href="https://www.espressif.com/sites/default/files/documentation/esp32-c3-wroom-02_datasheet_en.pdf">Datasheet</link></simpara>
</tip>
</section>
<section xml:id="_esp_protocol">
<title>ESP Protocol</title>
<simpara>The ESP protocol is a String-based protocol utilizing the <link linkend="_at_commands">AT-Command-Set</link> to send and receive data.</simpara>
<section xml:id="_at_commands">
<title>AT-Commands</title>
<simpara>The <link xl:href="https://docs.espressif.com/projects/esp-at/en/release-v2.2.0.0_esp8266/AT_Command_Set/index.html">AT-Commands</link> are the core ot the ESP protocol and a small subset used by this network stack can be found under <link xl:href="atCommands/include/AtCommands.h">AtCommands.h</link>.</simpara>
</section>
</section>
<section xml:id="_wifi_lib">
<title>Wi-Fi Connection</title>
<simpara>The wifi library provided under <link xl:href="wifi/">wifi</link> provides all required functions to connect to a local wifi network.</simpara>
<simpara>To connect to a network, the SSID and Password has to be passed to the library.
The CMake scripts will automatically create a <literal>NetworkConfig.c</literal> inside the <link xl:href="../../NetworkConfig.c">root folder</link>.
When you want to use wifi capabilities you than have to add the <literal>network_config</literal> library to your source code.</simpara>
<example>
<title>Example</title>
<formalpara>
<title>main.c</title>
<para>
<programlisting language="C" linenumbering="unnumbered">#include "Network.h"

int main (void) {
    //...
    networkConnectToNetwork();
    //...
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>NetworkConfig.c</title>
<para>
<programlisting language="C" linenumbering="unnumbered">#include "Network.h"

// ...

networkCredentials_t networkCredentials = {
    .ssid = "SSID",
    .password = "PASSWORD"
};</programlisting>
</para>
</formalpara>
<formalpara>
<title>CMakeLists.txt</title>
<para>
<programlisting language="CMake" linenumbering="unnumbered">add_executable(my-network-app
    main.c)
target_link_libraries(my-network-app
        ...
        network_config
        network_lib)
create_enV5_executable(my-network-app)</programlisting>
</para>
</formalpara>
</example>
</section>
<section xml:id="_http_get">
<title>HTTP Get</title>
<simpara>The http library provided under <link xl:href="http/">http</link> provides all required functions to execute HTTP-GET requests.</simpara>
<simpara>To properly handle the received answer, it is required to register a handle that processes the received HTTP-GET messages from the ESP32 module.
This handler is automatically set when the esp connects to a wifi network via the <link linkend="_wifi_lib">wifi library</link>.</simpara>
</section>
<section xml:id="_mqtt">
<title>MQTT</title>
<simpara>The mqtt library provided under <link xl:href="broker/">broker</link> provides all required functions for a mqtt client that can connect to a Broker.</simpara>
<simpara>To properly handle the received answer from the ESP32 module it is required to register a handle that processes the received messages.
This handler is automatically set when the broker connection was successful.</simpara>
<simpara>To connect to a broker, the required credentials have to be passed to the library.
The CMake scripts will automatically create a <literal>NetworkConfig.c</literal> inside the <link xl:href="../../NetworkConfig.c">root folder</link>.
When you want to use mqtt capabilities you than have to add the <literal>network_config</literal> library to your source code.</simpara>
<important>
<simpara>The <literal>clientId</literal> of every device has to be different</simpara>
</important>
<example>
<title>Example</title>
<formalpara>
<title>main.c</title>
<para>
<programlisting language="C" linenumbering="unnumbered">#include "MQTTBroker.h"

char[] brokerDomain = "eip://uni-due.de/es";
char[] clientId = "enV5";

int main (void) {
    //...
    mqttBrokerConnectToBroker(brokerDomain, clientId);
    //...
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>NetworkConfig.c</title>
<para>
<programlisting language="C" linenumbering="unnumbered">#include "MQTTBroker.h"

// ...

mqttHost_t broker = {
    .ip = "127.0.0.1",
    .port = 1883,
    .userId = "USER",
    .password = "PASSWORD"
};</programlisting>
</para>
</formalpara>
<formalpara>
<title>CMakeLists.txt</title>
<para>
<programlisting language="CMake" linenumbering="unnumbered">add_executable(my-network-app
    main.c)
target_link_libraries(my-network-app
        ...
        network_config
        espBroker_lib)
create_enV5_executable(my-network-app)</programlisting>
</para>
</formalpara>
</example>
<caution>
<simpara>When MQTT messages are sent to fast to the device, some messages will be dropped!</simpara>
</caution>
</section>
</article>