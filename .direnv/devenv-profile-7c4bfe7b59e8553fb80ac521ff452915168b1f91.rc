unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
AR='ar'
export AR
AS='as'
export AS
BASH='/nix/store/xhcgnphdwfg81j79nhspm0876cxglyj3-bash-5.2p37/bin/bash'
CC='clang'
export CC
CMAKE_INCLUDE_PATH='/nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env/include:/nix/store/shwsndmpjz2nc236q64cl89rhn6rgy1r-gnumake-4.4.1/include:/nix/store/l42qlg5fg64rjpfy76wzjfhmsff0ibc8-gdb-16.2/include:/nix/store/2nv50cczlwynmc9296972h5k70x2ry3f-gcc-arm-embedded-13.3.rel1/include:/nix/store/v0vy1c59f0vf71h64caw17hzymvg0zms-python3-3.12.10/include:/nix/store/gm5q6ny432c7hg7n29ir4j6xykl9m5fn-libcxx-19.1.7-dev/include:/nix/store/dzv2mymsklzzndanzv4c5qlppsckg0ly-compiler-rt-libc-19.1.7-dev/include:/nix/store/9szgbdimq2rfdi23l60hz185si754vx7-libiconv-109-dev/include:/nix/store/gzkq7qb8g6v5xvx4zik7qi80ksdf57bm-libresolv-83-dev/include:/nix/store/67mvdyn4fzm37x7nqqy2ssh5lfmwmfgf-libsbuf-14.1.0-dev/include:/nix/store/19k3q3rk37llqjlakr1gy6l7pcrschln-cups-headers-2.4.11/include'
export CMAKE_INCLUDE_PATH
CMAKE_LIBRARY_PATH='/nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env/lib:/nix/store/v0vy1c59f0vf71h64caw17hzymvg0zms-python3-3.12.10/lib:/nix/store/b1a3d7b0kvr03q7mgy6may69m1c3k76a-libcxx-19.1.7/lib:/nix/store/cfzl4zn0n2mqglfx1x757rssi84w0z1v-compiler-rt-libc-19.1.7/lib:/nix/store/0ccvgwg4cpgf9jwwc98rz7wxafsmsf44-libiconv-109/lib:/nix/store/w4xszq1syyk2av5qdv59bv4yxba4qgpc-libresolv-83/lib:/nix/store/isrdkn6nry8ia3rhwzxyx65d83racwhj-libsbuf-14.1.0/lib:/nix/store/y2m4cb8kk92cn3x0jr842ip1024br266-libutil-72/lib'
export CMAKE_LIBRARY_PATH
CONFIG_SHELL='/nix/store/xhcgnphdwfg81j79nhspm0876cxglyj3-bash-5.2p37/bin/bash'
export CONFIG_SHELL
CXX='clang++'
export CXX
DETERMINISTIC_BUILD='1'
export DETERMINISTIC_BUILD
DEVELOPER_DIR='/nix/store/afinrggjfrk7q9pb7rv50l50cj0y0l63-apple-sdk-11.3'
export DEVELOPER_DIR
DEVENV_DOTFILE='/Users/lukas/Projects/ies-ude/runtime.enV5/.devenv'
export DEVENV_DOTFILE
DEVENV_PROFILE='/nix/store/0h9jbi467i1r292nv8wgpbxqlvqqmi31-devenv-profile'
export DEVENV_PROFILE
DEVENV_ROOT='/Users/lukas/Projects/ies-ude/runtime.enV5'
export DEVENV_ROOT
DEVENV_RUNTIME='/var/folders/9h/f9hly_c55vz4sdg1xjzx6z_00000gn/T/devenv-ae04ab5'
export DEVENV_RUNTIME
DEVENV_STATE='/Users/lukas/Projects/ies-ude/runtime.enV5/.devenv/state'
export DEVENV_STATE
DEVENV_TASKS='[{"after":[],"before":[],"command":"/nix/store/xsjsrp9i267jhipzfgfrs2zclhc6mb13-devenv-enterShell","description":"Runs when entering the shell","exec_if_modified":[],"input":{},"name":"devenv:enterShell","status":null},{"after":[],"before":[],"command":null,"description":"Runs when entering the test environment","exec_if_modified":[],"input":{},"name":"devenv:enterTest","status":null},{"after":[],"before":[],"command":null,"description":"","exec_if_modified":[],"input":{},"name":"devenv:files","status":null}]'
export DEVENV_TASKS
HOSTTYPE='aarch64'
HOST_PATH='/nix/store/0ccvgwg4cpgf9jwwc98rz7wxafsmsf44-libiconv-109/bin:/nix/store/r9y8p97lcpm3kn03jsp157qr3kjhbxyh-coreutils-9.6/bin:/nix/store/i79f6sf3nq4n3n435pjrp0782kc395id-findutils-4.10.0/bin:/nix/store/asydkkql8fmcc2jjpiybljk87fb5iwkd-diffutils-3.10/bin:/nix/store/yfk1iriif0acn91as6qg96nwz6hs93si-gnused-4.9/bin:/nix/store/vyfs7l798mabb0kqw5v7xk87mzjn3d3x-gnugrep-3.11/bin:/nix/store/w7m7ys9nqgwqf0h2rwcw50vhgyysqhv0-gawk-5.3.1/bin:/nix/store/rphdiw3w4s7cy16z1y0slryjgaw3xal6-gnutar-1.35/bin:/nix/store/j9ibqjfcya1hf9x5522biyvzj6srsd2q-gzip-1.13/bin:/nix/store/r1pisnlfd4s197gf4r3h4x0i7lrfa790-bzip2-1.0.8-bin/bin:/nix/store/shwsndmpjz2nc236q64cl89rhn6rgy1r-gnumake-4.4.1/bin:/nix/store/xhcgnphdwfg81j79nhspm0876cxglyj3-bash-5.2p37/bin:/nix/store/ikbp0808bn0ydvgx0ivaz5w6i1jzjsp5-patch-2.7.6/bin:/nix/store/96j0xfm60pzczgbqbw1qbn1l1gxlfps7-xz-5.8.1-bin/bin:/nix/store/vify5yqsg42blv631021bd45xbihdhzw-file-5.46/bin'
export HOST_PATH
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LD='ld'
export LD
LD_DYLD_PATH='/usr/lib/dyld'
export LD_DYLD_PATH
LINENO='76'
MACHTYPE='aarch64-apple-darwin24.4.0'
MACOSX_DEPLOYMENT_TARGET='11.3'
export MACOSX_DEPLOYMENT_TARGET
NIXPKGS_CMAKE_PREFIX_PATH='/nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env:/nix/store/dp4v5iahnh78s6h77ayg5dql4wmvrnpg-uv-0.7.9:/nix/store/mrvg4qq09d51w5s95v15y4ym05q009fd-stdenv-darwin:/nix/store/shwsndmpjz2nc236q64cl89rhn6rgy1r-gnumake-4.4.1:/nix/store/qz677hf7pd911sygzch3r4gpzr3210nn-ccls-0.20241108:/nix/store/hj7iydwvhkslzsvw82iilv8say0xv5n7-pkg-config-wrapper-0.29.2:/nix/store/l42qlg5fg64rjpfy76wzjfhmsff0ibc8-gdb-16.2:/nix/store/5x3vlf39k7k3lx32vdmbsy71lk7vpskq-hello:/nix/store/bhlxbydiiasxicqxyd3vzh502dx421ql-cmake-3.31.6:/nix/store/1mqiaq9bbflpyckiqj5714f6qxg8fbbx-ninja-1.12.1:/nix/store/8zv1bjh4wgcc6vclypq71ij2yb9kgjv3-clang-tools-19.1.7:/nix/store/2nv50cczlwynmc9296972h5k70x2ry3f-gcc-arm-embedded-13.3.rel1:/nix/store/c7qyhjilw0bv7lmbr1xfbgliv0fdm6vg-ruff-0.11.12:/nix/store/5bpvpy26rn89s91ng2zq72inl2djsry3-python3.12-mypy-1.15.0:/nix/store/p8myiviiwsawqwj92588avb7pyxxrlz3-python3.12-mypy-extensions-1.1.0:/nix/store/0kjfch9h67w295z47dwpivhwavi4mzch-python3.12-flit-core-3.12.0:/nix/store/v0vy1c59f0vf71h64caw17hzymvg0zms-python3-3.12.10:/nix/store/nxn6c0aflzsxza10fvi88w9fxq7sq972-python3.12-typing-extensions-4.13.2:/nix/store/9namii1k8y223a43k5ra66pijc9gjcig-picotool-2.1.1:/nix/store/sd6ii9z7h0bwkcfp21fmggb5fxdb7a99-xcbuild-0.1.1-unstable-2019-11-20-xcrun:/nix/store/nxzmgd6sbzdzw7mz1ff0fnxsq77d9nyh-update-autotools-gnu-config-scripts-hook:/nix/store/xpja3ad45p55aryvgng6g9grp8yivvsd-clang-wrapper-19.1.7:/nix/store/1mrg8k5bprv5m9sxam91cbbx3ng5g158-cctools-binutils-darwin-wrapper-1010.6:/nix/store/gm5q6ny432c7hg7n29ir4j6xykl9m5fn-libcxx-19.1.7-dev:/nix/store/b1a3d7b0kvr03q7mgy6may69m1c3k76a-libcxx-19.1.7:/nix/store/dzv2mymsklzzndanzv4c5qlppsckg0ly-compiler-rt-libc-19.1.7-dev:/nix/store/cfzl4zn0n2mqglfx1x757rssi84w0z1v-compiler-rt-libc-19.1.7:/nix/store/afinrggjfrk7q9pb7rv50l50cj0y0l63-apple-sdk-11.3:/nix/store/9szgbdimq2rfdi23l60hz185si754vx7-libiconv-109-dev:/nix/store/0ccvgwg4cpgf9jwwc98rz7wxafsmsf44-libiconv-109:/nix/store/gzkq7qb8g6v5xvx4zik7qi80ksdf57bm-libresolv-83-dev:/nix/store/w4xszq1syyk2av5qdv59bv4yxba4qgpc-libresolv-83:/nix/store/67mvdyn4fzm37x7nqqy2ssh5lfmwmfgf-libsbuf-14.1.0-dev:/nix/store/isrdkn6nry8ia3rhwzxyx65d83racwhj-libsbuf-14.1.0:/nix/store/y2m4cb8kk92cn3x0jr842ip1024br266-libutil-72:/nix/store/19k3q3rk37llqjlakr1gy6l7pcrschln-cups-headers-2.4.11'
export NIXPKGS_CMAKE_PREFIX_PATH
NIX_APPLE_SDK_VERSION='110300'
export NIX_APPLE_SDK_VERSION
NIX_BINTOOLS='/nix/store/1mrg8k5bprv5m9sxam91cbbx3ng5g158-cctools-binutils-darwin-wrapper-1010.6'
export NIX_BINTOOLS
NIX_BINTOOLS_WRAPPER_TARGET_HOST_arm64_apple_darwin='1'
export NIX_BINTOOLS_WRAPPER_TARGET_HOST_arm64_apple_darwin
NIX_BUILD_CORES='10'
export NIX_BUILD_CORES
NIX_CC='/nix/store/xpja3ad45p55aryvgng6g9grp8yivvsd-clang-wrapper-19.1.7'
export NIX_CC
NIX_CC_WRAPPER_TARGET_HOST_arm64_apple_darwin='1'
export NIX_CC_WRAPPER_TARGET_HOST_arm64_apple_darwin
NIX_CFLAGS_COMPILE=' -frandom-seed=k6w2zskxk3 -isystem /nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env/include -isystem /nix/store/shwsndmpjz2nc236q64cl89rhn6rgy1r-gnumake-4.4.1/include -isystem /nix/store/l42qlg5fg64rjpfy76wzjfhmsff0ibc8-gdb-16.2/include -isystem /nix/store/2nv50cczlwynmc9296972h5k70x2ry3f-gcc-arm-embedded-13.3.rel1/include -isystem /nix/store/v0vy1c59f0vf71h64caw17hzymvg0zms-python3-3.12.10/include -isystem /nix/store/gm5q6ny432c7hg7n29ir4j6xykl9m5fn-libcxx-19.1.7-dev/include -isystem /nix/store/dzv2mymsklzzndanzv4c5qlppsckg0ly-compiler-rt-libc-19.1.7-dev/include -isystem /nix/store/9szgbdimq2rfdi23l60hz185si754vx7-libiconv-109-dev/include -isystem /nix/store/gzkq7qb8g6v5xvx4zik7qi80ksdf57bm-libresolv-83-dev/include -isystem /nix/store/67mvdyn4fzm37x7nqqy2ssh5lfmwmfgf-libsbuf-14.1.0-dev/include -isystem /nix/store/19k3q3rk37llqjlakr1gy6l7pcrschln-cups-headers-2.4.11/include -isystem /nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env/include -isystem /nix/store/shwsndmpjz2nc236q64cl89rhn6rgy1r-gnumake-4.4.1/include -isystem /nix/store/l42qlg5fg64rjpfy76wzjfhmsff0ibc8-gdb-16.2/include -isystem /nix/store/2nv50cczlwynmc9296972h5k70x2ry3f-gcc-arm-embedded-13.3.rel1/include -isystem /nix/store/v0vy1c59f0vf71h64caw17hzymvg0zms-python3-3.12.10/include -isystem /nix/store/gm5q6ny432c7hg7n29ir4j6xykl9m5fn-libcxx-19.1.7-dev/include -isystem /nix/store/dzv2mymsklzzndanzv4c5qlppsckg0ly-compiler-rt-libc-19.1.7-dev/include -isystem /nix/store/9szgbdimq2rfdi23l60hz185si754vx7-libiconv-109-dev/include -isystem /nix/store/gzkq7qb8g6v5xvx4zik7qi80ksdf57bm-libresolv-83-dev/include -isystem /nix/store/67mvdyn4fzm37x7nqqy2ssh5lfmwmfgf-libsbuf-14.1.0-dev/include -isystem /nix/store/19k3q3rk37llqjlakr1gy6l7pcrschln-cups-headers-2.4.11/include'
export NIX_CFLAGS_COMPILE
NIX_DONT_SET_RPATH='1'
export NIX_DONT_SET_RPATH
NIX_DONT_SET_RPATH_FOR_BUILD='1'
export NIX_DONT_SET_RPATH_FOR_BUILD
NIX_ENFORCE_NO_NATIVE='1'
export NIX_ENFORCE_NO_NATIVE
NIX_HARDENING_ENABLE='bindnow format fortify fortify3 pic relro stackclashprotection stackprotector strictoverflow zerocallusedregs'
export NIX_HARDENING_ENABLE
NIX_IGNORE_LD_THROUGH_GCC='1'
export NIX_IGNORE_LD_THROUGH_GCC
NIX_LDFLAGS=' -L/nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env/lib -L/nix/store/v0vy1c59f0vf71h64caw17hzymvg0zms-python3-3.12.10/lib -L/nix/store/b1a3d7b0kvr03q7mgy6may69m1c3k76a-libcxx-19.1.7/lib -L/nix/store/cfzl4zn0n2mqglfx1x757rssi84w0z1v-compiler-rt-libc-19.1.7/lib -L/nix/store/0ccvgwg4cpgf9jwwc98rz7wxafsmsf44-libiconv-109/lib -L/nix/store/w4xszq1syyk2av5qdv59bv4yxba4qgpc-libresolv-83/lib -L/nix/store/isrdkn6nry8ia3rhwzxyx65d83racwhj-libsbuf-14.1.0/lib -L/nix/store/y2m4cb8kk92cn3x0jr842ip1024br266-libutil-72/lib -L/nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env/lib -L/nix/store/v0vy1c59f0vf71h64caw17hzymvg0zms-python3-3.12.10/lib -L/nix/store/b1a3d7b0kvr03q7mgy6may69m1c3k76a-libcxx-19.1.7/lib -L/nix/store/cfzl4zn0n2mqglfx1x757rssi84w0z1v-compiler-rt-libc-19.1.7/lib -L/nix/store/0ccvgwg4cpgf9jwwc98rz7wxafsmsf44-libiconv-109/lib -L/nix/store/w4xszq1syyk2av5qdv59bv4yxba4qgpc-libresolv-83/lib -L/nix/store/isrdkn6nry8ia3rhwzxyx65d83racwhj-libsbuf-14.1.0/lib -L/nix/store/y2m4cb8kk92cn3x0jr842ip1024br266-libutil-72/lib'
export NIX_LDFLAGS
NIX_NO_SELF_RPATH='1'
export NIX_NO_SELF_RPATH
NIX_PKG_CONFIG_WRAPPER_TARGET_HOST_arm64_apple_darwin='1'
export NIX_PKG_CONFIG_WRAPPER_TARGET_HOST_arm64_apple_darwin
NIX_STORE='/nix/store'
export NIX_STORE
NM='nm'
export NM
OBJCOPY='objcopy'
export OBJCOPY
OBJDUMP='objdump'
export OBJDUMP
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='darwin24.4.0'
PATH='/nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env/bin:/nix/store/dp4v5iahnh78s6h77ayg5dql4wmvrnpg-uv-0.7.9/bin:/nix/store/shwsndmpjz2nc236q64cl89rhn6rgy1r-gnumake-4.4.1/bin:/nix/store/qz677hf7pd911sygzch3r4gpzr3210nn-ccls-0.20241108/bin:/nix/store/hj7iydwvhkslzsvw82iilv8say0xv5n7-pkg-config-wrapper-0.29.2/bin:/nix/store/l42qlg5fg64rjpfy76wzjfhmsff0ibc8-gdb-16.2/bin:/nix/store/5x3vlf39k7k3lx32vdmbsy71lk7vpskq-hello/bin:/nix/store/bhlxbydiiasxicqxyd3vzh502dx421ql-cmake-3.31.6/bin:/nix/store/1mqiaq9bbflpyckiqj5714f6qxg8fbbx-ninja-1.12.1/bin:/nix/store/8zv1bjh4wgcc6vclypq71ij2yb9kgjv3-clang-tools-19.1.7/bin:/nix/store/2nv50cczlwynmc9296972h5k70x2ry3f-gcc-arm-embedded-13.3.rel1/bin:/nix/store/c7qyhjilw0bv7lmbr1xfbgliv0fdm6vg-ruff-0.11.12/bin:/nix/store/5bpvpy26rn89s91ng2zq72inl2djsry3-python3.12-mypy-1.15.0/bin:/nix/store/v0vy1c59f0vf71h64caw17hzymvg0zms-python3-3.12.10/bin:/nix/store/9namii1k8y223a43k5ra66pijc9gjcig-picotool-2.1.1/bin:/nix/store/sd6ii9z7h0bwkcfp21fmggb5fxdb7a99-xcbuild-0.1.1-unstable-2019-11-20-xcrun/bin:/nix/store/xpja3ad45p55aryvgng6g9grp8yivvsd-clang-wrapper-19.1.7/bin:/nix/store/k6828vnjgvg78ypjqij39rqs6m3fqjvq-clang-19.1.7/bin:/nix/store/r9y8p97lcpm3kn03jsp157qr3kjhbxyh-coreutils-9.6/bin:/nix/store/1mrg8k5bprv5m9sxam91cbbx3ng5g158-cctools-binutils-darwin-wrapper-1010.6/bin:/nix/store/19jgcqbfg1bgknq7g8cfiflfn5sz494d-cctools-binutils-darwin-1010.6/bin:/nix/store/0ccvgwg4cpgf9jwwc98rz7wxafsmsf44-libiconv-109/bin:/nix/store/r9y8p97lcpm3kn03jsp157qr3kjhbxyh-coreutils-9.6/bin:/nix/store/i79f6sf3nq4n3n435pjrp0782kc395id-findutils-4.10.0/bin:/nix/store/asydkkql8fmcc2jjpiybljk87fb5iwkd-diffutils-3.10/bin:/nix/store/yfk1iriif0acn91as6qg96nwz6hs93si-gnused-4.9/bin:/nix/store/vyfs7l798mabb0kqw5v7xk87mzjn3d3x-gnugrep-3.11/bin:/nix/store/w7m7ys9nqgwqf0h2rwcw50vhgyysqhv0-gawk-5.3.1/bin:/nix/store/rphdiw3w4s7cy16z1y0slryjgaw3xal6-gnutar-1.35/bin:/nix/store/j9ibqjfcya1hf9x5522biyvzj6srsd2q-gzip-1.13/bin:/nix/store/r1pisnlfd4s197gf4r3h4x0i7lrfa790-bzip2-1.0.8-bin/bin:/nix/store/shwsndmpjz2nc236q64cl89rhn6rgy1r-gnumake-4.4.1/bin:/nix/store/xhcgnphdwfg81j79nhspm0876cxglyj3-bash-5.2p37/bin:/nix/store/ikbp0808bn0ydvgx0ivaz5w6i1jzjsp5-patch-2.7.6/bin:/nix/store/96j0xfm60pzczgbqbw1qbn1l1gxlfps7-xz-5.8.1-bin/bin:/nix/store/vify5yqsg42blv631021bd45xbihdhzw-file-5.46/bin'
export PATH
PATH_LOCALE='/nix/store/g05ixiavspfyf1fxn1h2x3mq3jhdfrnm-locale-118/share/locale'
export PATH_LOCALE
PKG_CONFIG='pkg-config'
export PKG_CONFIG
PKG_CONFIG_PATH='/nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env/lib/pkgconfig:/nix/store/v0vy1c59f0vf71h64caw17hzymvg0zms-python3-3.12.10/lib/pkgconfig'
export PKG_CONFIG_PATH
PS4='+ '
PYTHONHASHSEED='0'
export PYTHONHASHSEED
PYTHONNOUSERSITE='1'
export PYTHONNOUSERSITE
PYTHONPATH='/nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env/lib/python3.12/site-packages:/nix/store/5bpvpy26rn89s91ng2zq72inl2djsry3-python3.12-mypy-1.15.0/lib/python3.12/site-packages:/nix/store/p8myiviiwsawqwj92588avb7pyxxrlz3-python3.12-mypy-extensions-1.1.0/lib/python3.12/site-packages:/nix/store/0kjfch9h67w295z47dwpivhwavi4mzch-python3.12-flit-core-3.12.0/lib/python3.12/site-packages:/nix/store/v0vy1c59f0vf71h64caw17hzymvg0zms-python3-3.12.10/lib/python3.12/site-packages:/nix/store/nxn6c0aflzsxza10fvi88w9fxq7sq972-python3.12-typing-extensions-4.13.2/lib/python3.12/site-packages'
export PYTHONPATH
RANLIB='ranlib'
export RANLIB
SDKROOT='/nix/store/afinrggjfrk7q9pb7rv50l50cj0y0l63-apple-sdk-11.3/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk'
export SDKROOT
SHELL='/nix/store/xhcgnphdwfg81j79nhspm0876cxglyj3-bash-5.2p37/bin/bash'
export SHELL
SIZE='size'
export SIZE
SOURCE_DATE_EPOCH='315532800'
export SOURCE_DATE_EPOCH
STRINGS='strings'
export STRINGS
STRIP='strip'
export STRIP
UV_PROJECT_ENVIRONMENT='/Users/lukas/Projects/ies-ude/runtime.enV5/.devenv/state/venv'
export UV_PROJECT_ENVIRONMENT
UV_PYTHON_DOWNLOADS='never'
export UV_PYTHON_DOWNLOADS
XDG_DATA_DIRS='/nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env/share:/nix/store/dp4v5iahnh78s6h77ayg5dql4wmvrnpg-uv-0.7.9/share:/nix/store/shwsndmpjz2nc236q64cl89rhn6rgy1r-gnumake-4.4.1/share:/nix/store/hj7iydwvhkslzsvw82iilv8say0xv5n7-pkg-config-wrapper-0.29.2/share:/nix/store/l42qlg5fg64rjpfy76wzjfhmsff0ibc8-gdb-16.2/share:/nix/store/bhlxbydiiasxicqxyd3vzh502dx421ql-cmake-3.31.6/share:/nix/store/1mqiaq9bbflpyckiqj5714f6qxg8fbbx-ninja-1.12.1/share:/nix/store/2nv50cczlwynmc9296972h5k70x2ry3f-gcc-arm-embedded-13.3.rel1/share:/nix/store/c7qyhjilw0bv7lmbr1xfbgliv0fdm6vg-ruff-0.11.12/share:/nix/store/v0vy1c59f0vf71h64caw17hzymvg0zms-python3-3.12.10/share:/nix/store/9namii1k8y223a43k5ra66pijc9gjcig-picotool-2.1.1/share'
export XDG_DATA_DIRS
ZERO_AR_DATE='1'
export ZERO_AR_DATE
__darwinAllowLocalNetworking=''
export __darwinAllowLocalNetworking
__impureHostDeps='/bin/sh /usr/lib/libSystem.B.dylib /usr/lib/system/libunc.dylib /dev/zero /dev/random /dev/urandom /bin/sh'
export __impureHostDeps
__propagatedImpureHostDeps=''
export __propagatedImpureHostDeps
__propagatedSandboxProfile=''
export __propagatedSandboxProfile
__sandboxProfile=''
export __sandboxProfile
__structuredAttrs=''
export __structuredAttrs
_substituteStream_has_warned_replace_deprecation='false'
buildInputs='/nix/store/afinrggjfrk7q9pb7rv50l50cj0y0l63-apple-sdk-11.3'
export buildInputs
buildPhase='{ echo "------------------------------------------------------------";
  echo " WARNING: the existence of this path is not guaranteed.";
  echo " It is an internal implementation detail for pkgs.mkShell.";
  echo "------------------------------------------------------------";
  echo;
  # Record all build inputs as runtime dependencies
  export;
} >> "$out"
'
export buildPhase
builder='/nix/store/xhcgnphdwfg81j79nhspm0876cxglyj3-bash-5.2p37/bin/bash'
export builder
checkPhase='ninjaCheckPhase'
cmakeFlags=''
export cmakeFlags
configureFlags=''
export configureFlags
configurePhase='cmakeConfigurePhase'
defaultBuildInputs=''
defaultNativeBuildInputs='/nix/store/nxzmgd6sbzdzw7mz1ff0fnxsq77d9nyh-update-autotools-gnu-config-scripts-hook /nix/store/jjhw2phnaip4kg0qjas3x3fsaifi8y0w-no-broken-symlinks.sh /nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh /nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh /nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh /nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh /nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh /nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh /nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh /nix/store/cmzya9irvxzlkh7lfy6i82gbp0saxqj3-multiple-outputs.sh /nix/store/hxv896faph0rqxjq2ycxpcrbnngc95sz-patch-shebangs.sh /nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh /nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh /nix/store/z7k98578dfzi6l3hsvbivzm7hfqlk0zc-set-source-date-epoch-to-latest.sh /nix/store/pilsssjjdxvdphlg2h19p0bfx5q0jzkn-strip.sh /nix/store/xpja3ad45p55aryvgng6g9grp8yivvsd-clang-wrapper-19.1.7'
depsBuildBuild=''
export depsBuildBuild
depsBuildBuildPropagated=''
export depsBuildBuildPropagated
depsBuildTarget=''
export depsBuildTarget
depsBuildTargetPropagated=''
export depsBuildTargetPropagated
depsHostHost=''
export depsHostHost
depsHostHostPropagated=''
export depsHostHostPropagated
depsTargetTarget=''
export depsTargetTarget
depsTargetTargetPropagated=''
export depsTargetTargetPropagated
doCheck=''
export doCheck
doInstallCheck=''
export doInstallCheck
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
declare -a envBuildBuildHooks=('addPythonPath' )
declare -a envBuildHostHooks=('addPythonPath' )
declare -a envBuildTargetHooks=('addPythonPath' )
declare -a envHostHostHooks=('pkgConfigWrapper_addPkgConfigPath' 'addCMakeParams' 'ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envHostTargetHooks=('pkgConfigWrapper_addPkgConfigPath' 'addCMakeParams' 'ccWrapper_addCVars' 'bintoolsWrapper_addLDVars' )
declare -a envTargetTargetHooks=()
declare -a fixupOutputHooks=('if [[ -z "${noAuditTmpdir-}" && -e "$prefix" ]]; then auditTmpdir "$prefix"; fi' 'if [ -z "${dontGzipMan-}" ]; then compressManPages "$prefix"; fi' '_moveLib64' '_moveSbin' '_moveSystemdUserUnits' 'patchShebangsAuto' '_pruneLibtoolFiles' '_doStrip' )
flag='-L/nix/store/y2m4cb8kk92cn3x0jr842ip1024br266-libutil-72/lib'
guess='10'
hardeningDisable=''
export hardeningDisable
iframework_seen=''
initialPath='/nix/store/r9y8p97lcpm3kn03jsp157qr3kjhbxyh-coreutils-9.6 /nix/store/i79f6sf3nq4n3n435pjrp0782kc395id-findutils-4.10.0 /nix/store/asydkkql8fmcc2jjpiybljk87fb5iwkd-diffutils-3.10 /nix/store/yfk1iriif0acn91as6qg96nwz6hs93si-gnused-4.9 /nix/store/vyfs7l798mabb0kqw5v7xk87mzjn3d3x-gnugrep-3.11 /nix/store/w7m7ys9nqgwqf0h2rwcw50vhgyysqhv0-gawk-5.3.1 /nix/store/rphdiw3w4s7cy16z1y0slryjgaw3xal6-gnutar-1.35 /nix/store/j9ibqjfcya1hf9x5522biyvzj6srsd2q-gzip-1.13 /nix/store/r1pisnlfd4s197gf4r3h4x0i7lrfa790-bzip2-1.0.8-bin /nix/store/shwsndmpjz2nc236q64cl89rhn6rgy1r-gnumake-4.4.1 /nix/store/xhcgnphdwfg81j79nhspm0876cxglyj3-bash-5.2p37 /nix/store/ikbp0808bn0ydvgx0ivaz5w6i1jzjsp5-patch-2.7.6 /nix/store/96j0xfm60pzczgbqbw1qbn1l1gxlfps7-xz-5.8.1-bin /nix/store/vify5yqsg42blv631021bd45xbihdhzw-file-5.46'
installPhase='ninjaInstallPhase'
isystem_seen=''
mesonFlags=''
export mesonFlags
name='devenv-shell-env'
export name
nativeBuildInputs='/nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env /nix/store/dp4v5iahnh78s6h77ayg5dql4wmvrnpg-uv-0.7.9 /nix/store/mrvg4qq09d51w5s95v15y4ym05q009fd-stdenv-darwin /nix/store/shwsndmpjz2nc236q64cl89rhn6rgy1r-gnumake-4.4.1 /nix/store/qz677hf7pd911sygzch3r4gpzr3210nn-ccls-0.20241108 /nix/store/hj7iydwvhkslzsvw82iilv8say0xv5n7-pkg-config-wrapper-0.29.2 /nix/store/l42qlg5fg64rjpfy76wzjfhmsff0ibc8-gdb-16.2 /nix/store/5x3vlf39k7k3lx32vdmbsy71lk7vpskq-hello /nix/store/bhlxbydiiasxicqxyd3vzh502dx421ql-cmake-3.31.6 /nix/store/1mqiaq9bbflpyckiqj5714f6qxg8fbbx-ninja-1.12.1 /nix/store/8zv1bjh4wgcc6vclypq71ij2yb9kgjv3-clang-tools-19.1.7 /nix/store/2nv50cczlwynmc9296972h5k70x2ry3f-gcc-arm-embedded-13.3.rel1 /nix/store/c7qyhjilw0bv7lmbr1xfbgliv0fdm6vg-ruff-0.11.12 /nix/store/5bpvpy26rn89s91ng2zq72inl2djsry3-python3.12-mypy-1.15.0 /nix/store/9namii1k8y223a43k5ra66pijc9gjcig-picotool-2.1.1 /nix/store/hj7iydwvhkslzsvw82iilv8say0xv5n7-pkg-config-wrapper-0.29.2'
export nativeBuildInputs
out='/Users/lukas/Projects/ies-ude/runtime.enV5/outputs/out'
export out
outputBin='out'
outputDev='out'
outputDevdoc='REMOVE'
outputDevman='out'
outputDoc='out'
outputInclude='out'
outputInfo='out'
outputLib='out'
outputMan='out'
outputs='out'
export outputs
patches=''
export patches
phases='buildPhase'
export phases
pkg='/nix/store/xpja3ad45p55aryvgng6g9grp8yivvsd-clang-wrapper-19.1.7'
declare -a pkgsBuildBuild=()
declare -a pkgsBuildHost=('/nix/store/gadf8v6dmihci8b34c41ahlq1bxvf6wi-python3-3.12.10-env' '/nix/store/dp4v5iahnh78s6h77ayg5dql4wmvrnpg-uv-0.7.9' '/nix/store/mrvg4qq09d51w5s95v15y4ym05q009fd-stdenv-darwin' '/nix/store/shwsndmpjz2nc236q64cl89rhn6rgy1r-gnumake-4.4.1' '/nix/store/qz677hf7pd911sygzch3r4gpzr3210nn-ccls-0.20241108' '/nix/store/hj7iydwvhkslzsvw82iilv8say0xv5n7-pkg-config-wrapper-0.29.2' '/nix/store/l42qlg5fg64rjpfy76wzjfhmsff0ibc8-gdb-16.2' '/nix/store/5x3vlf39k7k3lx32vdmbsy71lk7vpskq-hello' '/nix/store/bhlxbydiiasxicqxyd3vzh502dx421ql-cmake-3.31.6' '/nix/store/1mqiaq9bbflpyckiqj5714f6qxg8fbbx-ninja-1.12.1' '/nix/store/8zv1bjh4wgcc6vclypq71ij2yb9kgjv3-clang-tools-19.1.7' '/nix/store/2nv50cczlwynmc9296972h5k70x2ry3f-gcc-arm-embedded-13.3.rel1' '/nix/store/c7qyhjilw0bv7lmbr1xfbgliv0fdm6vg-ruff-0.11.12' '/nix/store/5bpvpy26rn89s91ng2zq72inl2djsry3-python3.12-mypy-1.15.0' '/nix/store/p8myiviiwsawqwj92588avb7pyxxrlz3-python3.12-mypy-extensions-1.1.0' '/nix/store/0kjfch9h67w295z47dwpivhwavi4mzch-python3.12-flit-core-3.12.0' '/nix/store/v0vy1c59f0vf71h64caw17hzymvg0zms-python3-3.12.10' '/nix/store/nxn6c0aflzsxza10fvi88w9fxq7sq972-python3.12-typing-extensions-4.13.2' '/nix/store/9namii1k8y223a43k5ra66pijc9gjcig-picotool-2.1.1' '/nix/store/sd6ii9z7h0bwkcfp21fmggb5fxdb7a99-xcbuild-0.1.1-unstable-2019-11-20-xcrun' '/nix/store/nxzmgd6sbzdzw7mz1ff0fnxsq77d9nyh-update-autotools-gnu-config-scripts-hook' '/nix/store/jjhw2phnaip4kg0qjas3x3fsaifi8y0w-no-broken-symlinks.sh' '/nix/store/h9lc1dpi14z7is86ffhl3ld569138595-audit-tmpdir.sh' '/nix/store/m54bmrhj6fqz8nds5zcj97w9s9bckc9v-compress-man-pages.sh' '/nix/store/wgrbkkaldkrlrni33ccvm3b6vbxzb656-make-symlinks-relative.sh' '/nix/store/5yzw0vhkyszf2d179m0qfkgxmp5wjjx4-move-docs.sh' '/nix/store/fyaryjvghbkpfnsyw97hb3lyb37s1pd6-move-lib64.sh' '/nix/store/kd4xwxjpjxi71jkm6ka0np72if9rm3y0-move-sbin.sh' '/nix/store/pag6l61paj1dc9sv15l7bm5c17xn5kyk-move-systemd-user-units.sh' '/nix/store/cmzya9irvxzlkh7lfy6i82gbp0saxqj3-multiple-outputs.sh' '/nix/store/hxv896faph0rqxjq2ycxpcrbnngc95sz-patch-shebangs.sh' '/nix/store/cickvswrvann041nqxb0rxilc46svw1n-prune-libtool-files.sh' '/nix/store/xyff06pkhki3qy1ls77w10s0v79c9il0-reproducible-builds.sh' '/nix/store/z7k98578dfzi6l3hsvbivzm7hfqlk0zc-set-source-date-epoch-to-latest.sh' '/nix/store/pilsssjjdxvdphlg2h19p0bfx5q0jzkn-strip.sh' '/nix/store/xpja3ad45p55aryvgng6g9grp8yivvsd-clang-wrapper-19.1.7' '/nix/store/1mrg8k5bprv5m9sxam91cbbx3ng5g158-cctools-binutils-darwin-wrapper-1010.6' )
declare -a pkgsBuildTarget=()
declare -a pkgsHostHost=('/nix/store/gm5q6ny432c7hg7n29ir4j6xykl9m5fn-libcxx-19.1.7-dev' '/nix/store/b1a3d7b0kvr03q7mgy6may69m1c3k76a-libcxx-19.1.7' '/nix/store/dzv2mymsklzzndanzv4c5qlppsckg0ly-compiler-rt-libc-19.1.7-dev' '/nix/store/cfzl4zn0n2mqglfx1x757rssi84w0z1v-compiler-rt-libc-19.1.7' )
declare -a pkgsHostTarget=('/nix/store/afinrggjfrk7q9pb7rv50l50cj0y0l63-apple-sdk-11.3' '/nix/store/9szgbdimq2rfdi23l60hz185si754vx7-libiconv-109-dev' '/nix/store/0ccvgwg4cpgf9jwwc98rz7wxafsmsf44-libiconv-109' '/nix/store/gzkq7qb8g6v5xvx4zik7qi80ksdf57bm-libresolv-83-dev' '/nix/store/w4xszq1syyk2av5qdv59bv4yxba4qgpc-libresolv-83' '/nix/store/67mvdyn4fzm37x7nqqy2ssh5lfmwmfgf-libsbuf-14.1.0-dev' '/nix/store/isrdkn6nry8ia3rhwzxyx65d83racwhj-libsbuf-14.1.0' '/nix/store/y2m4cb8kk92cn3x0jr842ip1024br266-libutil-72' '/nix/store/19k3q3rk37llqjlakr1gy6l7pcrschln-cups-headers-2.4.11' )
declare -a pkgsTargetTarget=()
declare -a postFixupHooks=('cmakePcfileCheckPhase' 'noBrokenSymlinksInAllOutputs' '_makeSymlinksRelativeInAllOutputs' '_multioutPropagateDev' )
declare -a postHooks=('makeCmakeFindLibs' )
declare -a postUnpackHooks=('_updateSourceDateEpochFromSourceRoot' )
declare -a preConfigureHooks=('_multioutConfig' )
preConfigurePhases=' updateAutotoolsGnuConfigScriptsPhase'
declare -a preFixupHooks=('_moveToShare' '_multioutDocs' '_multioutDevs' )
preferLocalBuild='1'
export preferLocalBuild
prefix='/Users/lukas/Projects/ies-ude/runtime.enV5/outputs/out'
declare -a propagatedBuildDepFiles=('propagated-build-build-deps' 'propagated-native-build-inputs' 'propagated-build-target-deps' )
propagatedBuildInputs=''
export propagatedBuildInputs
declare -a propagatedHostDepFiles=('propagated-host-host-deps' 'propagated-build-inputs' )
propagatedNativeBuildInputs=''
export propagatedNativeBuildInputs
declare -a propagatedTargetDepFiles=('propagated-target-target-deps' )
setOutputFlags=''
shell='/nix/store/xhcgnphdwfg81j79nhspm0876cxglyj3-bash-5.2p37/bin/bash'
export shell
shellHook='
export PS1="\[\e[0;34m\](devenv)\[\e[0m\] ${PS1-}"

# override temp directories after "nix develop"
for var in TMP TMPDIR TEMP TEMPDIR; do
  if [ -n "${!var-}" ]; then
    export "$var"=/var/folders/9h/f9hly_c55vz4sdg1xjzx6z_00000gn/T/
  fi
done
if [ -n "${NIX_BUILD_TOP-}" ]; then
  unset NIX_BUILD_TOP
fi

# set path to locales on non-NixOS Linux hosts


# direnv helper
if [ ! type -p direnv &>/dev/null && -f .envrc ]; then
  echo "An .envrc file was detected, but the direnv command is not installed."
  echo "To use this configuration, please install direnv: https://direnv.net/docs/installation.html"
fi

mkdir -p "$DEVENV_STATE"
if [ ! -L "$DEVENV_DOTFILE/profile" ] || [ "$(/nix/store/r9y8p97lcpm3kn03jsp157qr3kjhbxyh-coreutils-9.6/bin/readlink $DEVENV_DOTFILE/profile)" != "/nix/store/0h9jbi467i1r292nv8wgpbxqlvqqmi31-devenv-profile" ]
then
  ln -snf /nix/store/0h9jbi467i1r292nv8wgpbxqlvqqmi31-devenv-profile "$DEVENV_DOTFILE/profile"
fi
unset HOST_PATH NIX_BUILD_CORES __structuredAttrs buildInputs buildPhase builder depsBuildBuild depsBuildBuildPropagated depsBuildTarget depsBuildTargetPropagated depsHostHost depsHostHostPropagated depsTargetTarget depsTargetTargetPropagated dontAddDisableDepTrack doCheck doInstallCheck nativeBuildInputs out outputs patches phases preferLocalBuild propagatedBuildInputs propagatedNativeBuildInputs shell shellHook stdenv strictDeps

mkdir -p /var/folders/9h/f9hly_c55vz4sdg1xjzx6z_00000gn/T/devenv-ae04ab5
ln -snf /var/folders/9h/f9hly_c55vz4sdg1xjzx6z_00000gn/T/devenv-ae04ab5 /Users/lukas/Projects/ies-ude/runtime.enV5/.devenv/run

# Read the path to the installed `configPath` from the hook state.
configFile=""
if [ -f '\''/Users/lukas/Projects/ies-ude/runtime.enV5/.devenv/state/git-hooks/config.json'\'' ]; then
  prevConfigPath=$(/nix/store/d0r880glv6pvpxibssrcl2v7v4sqijfx-jq-1.7.1-bin/bin/jq -r '\''.configPath'\'' '\''/Users/lukas/Projects/ies-ude/runtime.enV5/.devenv/state/git-hooks/config.json'\'')
  if [ -n "$prevConfigPath" ] && [ "$prevConfigPath" != "null" ]; then
    configFile="/Users/lukas/Projects/ies-ude/runtime.enV5/$prevConfigPath"
  fi
fi

# Fall back to the current config path if state file doesn'\''t exist or doesn'\''t contain a path
if [ -z "$configFile" ]; then
  configFile='\''/Users/lukas/Projects/ies-ude/runtime.enV5/.pre-commit-config.yaml'\''
fi

# Only remove if it'\''s a symlink to the nix store
if $(nix-store --quiet --verify-path "$configFile" > /dev/null 2>&1); then
  echo "Removing $configFile"
  rm "$configFile" || echo "Warning: Failed to uninstall git-hooks at $configFile" >&2
fi


export PYTHONPATH="$DEVENV_PROFILE/lib/python3.12/site-packages${PYTHONPATH:+:$PYTHONPATH}"

/nix/store/6wwgwh8xcn6kp7x004kqazi4pnpzjl3h-devenv-tasks-1.7.0/bin/devenv-tasks run devenv:enterShell --mode all
if [ -f "$DEVENV_DOTFILE/load-exports" ]; then
  source "$DEVENV_DOTFILE/load-exports"
fi

echo "✨ devenv 1.4.0 is out of date. Please update to 1.6.1: https://devenv.sh/getting-started/#installation" >&2


# Check whether the direnv integration is out of date.
{
  if [[ ":${DIRENV_ACTIVE-}:" == *":/Users/lukas/Projects/ies-ude/runtime.enV5:"* ]]; then
    if [[ ! "${DEVENV_NO_DIRENVRC_OUTDATED_WARNING-}" == 1 && ! "${DEVENV_DIRENVRC_ROLLING_UPGRADE-}" == 1 ]]; then
      if [[ ${DEVENV_DIRENVRC_VERSION:-0} -lt 1 ]]; then
        direnv_line=$(grep --color=never -E "source_url.*cachix/devenv" .envrc || echo "")

        echo "✨ The direnv integration in your .envrc is out of date."
        echo ""
        echo -n "RECOMMENDED: devenv can now auto-upgrade the direnv integration. "
        if [[ -n "$direnv_line" ]]; then
          echo "To enable this feature, replace the following line in your .envrc:"
          echo ""
          echo "  $direnv_line"
          echo ""
          echo "with:"
          echo ""
          echo "  eval \"\$(devenv direnvrc)\""
        else
          echo "To enable this feature, replace the \`source_url\` line that fetches the direnvrc integration in your .envrc with:"
          echo ""
          echo "  eval \"$(devenv direnvrc)\""
        fi
        echo ""
          echo "If you prefer to continue managing the integration manually, follow the upgrade instructions at https://devenv.sh/automatic-shell-activation/."
          echo ""
          echo "To disable this message:"
          echo ""
          echo "  Add the following environment to your .envrc before \`use devenv\`:"
          echo ""
          echo "    export DEVENV_NO_DIRENVRC_OUTDATED_WARNING=1"
          echo ""
          echo "  Or set the following option in your devenv configuration:"
          echo ""
          echo "    devenv.warnOnNewVersion = false;"
          echo ""
      fi
    fi
  fi
} >&2

hello
cmake --version

'
export shellHook
stdenv='/nix/store/q5bllzq3waqi02arg6qxrzxmimr149iy-stdenv-darwin'
export stdenv
strictDeps=''
export strictDeps
stripDebugFlags='-S'
system='aarch64-darwin'
export system
declare -a unpackCmdHooks=('_defaultUnpack' )
_activatePkgs ()
{
 
    local hostOffset targetOffset;
    local pkg;
    for hostOffset in "${allPlatOffsets[@]}";
    do
        local pkgsVar="${pkgAccumVarVars[hostOffset + 1]}";
        for targetOffset in "${allPlatOffsets[@]}";
        do
            (( hostOffset <= targetOffset )) || continue;
            local pkgsRef="${pkgsVar}[$targetOffset - $hostOffset]";
            local pkgsSlice="${!pkgsRef}[@]";
            for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
            do
                activatePackage "$pkg" "$hostOffset" "$targetOffset";
            done;
        done;
    done
}
_addRpathPrefix ()
{
 
    if [ "${NIX_NO_SELF_RPATH:-0}" != 1 ]; then
        export NIX_LDFLAGS="-rpath $1/lib ${NIX_LDFLAGS-}";
    fi
}
_addToEnv ()
{
 
    local depHostOffset depTargetOffset;
    local pkg;
    for depHostOffset in "${allPlatOffsets[@]}";
    do
        local hookVar="${pkgHookVarVars[depHostOffset + 1]}";
        local pkgsVar="${pkgAccumVarVars[depHostOffset + 1]}";
        for depTargetOffset in "${allPlatOffsets[@]}";
        do
            (( depHostOffset <= depTargetOffset )) || continue;
            local hookRef="${hookVar}[$depTargetOffset - $depHostOffset]";
            if [[ -z "${strictDeps-}" ]]; then
                local visitedPkgs="";
                for pkg in "${pkgsBuildBuild[@]}" "${pkgsBuildHost[@]}" "${pkgsBuildTarget[@]}" "${pkgsHostHost[@]}" "${pkgsHostTarget[@]}" "${pkgsTargetTarget[@]}";
                do
                    if [[ "$visitedPkgs" = *"$pkg"* ]]; then
                        continue;
                    fi;
                    runHook "${!hookRef}" "$pkg";
                    visitedPkgs+=" $pkg";
                done;
            else
                local pkgsRef="${pkgsVar}[$depTargetOffset - $depHostOffset]";
                local pkgsSlice="${!pkgsRef}[@]";
                for pkg in ${!pkgsSlice+"${!pkgsSlice}"};
                do
                    runHook "${!hookRef}" "$pkg";
                done;
            fi;
        done;
    done
}
_allFlags ()
{
 
    export system pname name version;
    while IFS='' read -r varName; do
        nixTalkativeLog "@${varName}@ -> ${!varName}";
        args+=("--subst-var" "$varName");
    done < <(awk 'BEGIN { for (v in ENVIRON) if (v ~ /^[a-z][a-zA-Z0-9_]*$/) print v }')
}
_assignFirst ()
{
 
    local varName="$1";
    local _var;
    local REMOVE=REMOVE;
    shift;
    for _var in "$@";
    do
        if [ -n "${!_var-}" ]; then
            eval "${varName}"="${_var}";
            return;
        fi;
    done;
    echo;
    echo "error: _assignFirst: could not find a non-empty variable whose name to assign to ${varName}.";
    echo "       The following variables were all unset or empty:";
    echo "           $*";
    if [ -z "${out:-}" ]; then
        echo '       If you do not want an "out" output in your derivation, make sure to define';
        echo '       the other specific required outputs. This can be achieved by picking one';
        echo "       of the above as an output.";
        echo '       You do not have to remove "out" if you want to have a different default';
        echo '       output, because the first output is taken as a default.';
        echo;
    fi;
    return 1
}
_callImplicitHook ()
{
 
    local def="$1";
    local hookName="$2";
    if declare -F "$hookName" > /dev/null; then
        nixTalkativeLog "calling implicit '$hookName' function hook";
        "$hookName";
    else
        if type -p "$hookName" > /dev/null; then
            nixTalkativeLog "sourcing implicit '$hookName' script hook";
            source "$hookName";
        else
            if [ -n "${!hookName:-}" ]; then
                nixTalkativeLog "evaling implicit '$hookName' string hook";
                eval "${!hookName}";
            else
                return "$def";
            fi;
        fi;
    fi
}
_defaultUnpack ()
{
 
    local fn="$1";
    local destination;
    if [ -d "$fn" ]; then
        destination="$(stripHash "$fn")";
        if [ -e "$destination" ]; then
            echo "Cannot copy $fn to $destination: destination already exists!";
            echo "Did you specify two \"srcs\" with the same \"name\"?";
            return 1;
        fi;
        cp -r --preserve=mode,timestamps --reflink=auto -- "$fn" "$destination";
    else
        case "$fn" in 
            *.tar.xz | *.tar.lzma | *.txz)
                ( XZ_OPT="--threads=$NIX_BUILD_CORES" xz -d < "$fn";
                true ) | tar xf - --mode=+w --warning=no-timestamp
            ;;
            *.tar | *.tar.* | *.tgz | *.tbz2 | *.tbz)
                tar xf "$fn" --mode=+w --warning=no-timestamp
            ;;
            *)
                return 1
            ;;
        esac;
    fi
}
_doStrip ()
{
 
    local -ra flags=(dontStripHost dontStripTarget);
    local -ra debugDirs=(stripDebugList stripDebugListTarget);
    local -ra allDirs=(stripAllList stripAllListTarget);
    local -ra stripCmds=(STRIP STRIP_FOR_TARGET);
    local -ra ranlibCmds=(RANLIB RANLIB_FOR_TARGET);
    stripDebugList=${stripDebugList[*]:-lib lib32 lib64 libexec bin sbin Applications Library/Frameworks};
    stripDebugListTarget=${stripDebugListTarget[*]:-};
    stripAllList=${stripAllList[*]:-};
    stripAllListTarget=${stripAllListTarget[*]:-};
    local i;
    for i in ${!stripCmds[@]};
    do
        local -n flag="${flags[$i]}";
        local -n debugDirList="${debugDirs[$i]}";
        local -n allDirList="${allDirs[$i]}";
        local -n stripCmd="${stripCmds[$i]}";
        local -n ranlibCmd="${ranlibCmds[$i]}";
        if [[ -n "${dontStrip-}" || -n "${flag-}" ]] || ! type -f "${stripCmd-}" 2> /dev/null 1>&2; then
            continue;
        fi;
        stripDirs "$stripCmd" "$ranlibCmd" "$debugDirList" "${stripDebugFlags[*]:--S -p}";
        stripDirs "$stripCmd" "$ranlibCmd" "$allDirList" "${stripAllFlags[*]:--s -p}";
    done
}
_eval ()
{
 
    if declare -F "$1" > /dev/null 2>&1; then
        "$@";
    else
        eval "$1";
    fi
}
_logHook ()
{
 
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    local hookKind="$1";
    local hookExpr="$2";
    shift 2;
    if declare -F "$hookExpr" > /dev/null 2>&1; then
        nixTalkativeLog "calling '$hookKind' function hook '$hookExpr'" "$@";
    else
        if type -p "$hookExpr" > /dev/null; then
            nixTalkativeLog "sourcing '$hookKind' script hook '$hookExpr'";
        else
            if [[ "$hookExpr" != "_callImplicitHook"* ]]; then
                local exprToOutput;
                if [[ ${NIX_DEBUG:-0} -ge 5 ]]; then
                    exprToOutput="$hookExpr";
                else
                    local hookExprLine;
                    while IFS= read -r hookExprLine; do
                        hookExprLine="${hookExprLine#"${hookExprLine%%[![:space:]]*}"}";
                        if [[ -n "$hookExprLine" ]]; then
                            exprToOutput+="$hookExprLine\\n ";
                        fi;
                    done <<< "$hookExpr";
                    exprToOutput="${exprToOutput%%\\n }";
                fi;
                nixTalkativeLog "evaling '$hookKind' string hook '$exprToOutput'";
            fi;
        fi;
    fi
}
_makeSymlinksRelative ()
{
 
    local symlinkTarget;
    if [ "${dontRewriteSymlinks-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    while IFS= read -r -d '' f; do
        symlinkTarget=$(readlink "$f");
        if [[ "$symlinkTarget"/ != "$prefix"/* ]]; then
            continue;
        fi;
        if [ ! -e "$symlinkTarget" ]; then
            echo "the symlink $f is broken, it points to $symlinkTarget (which is missing)";
        fi;
        echo "rewriting symlink $f to be relative to $prefix";
        ln -snrf "$symlinkTarget" "$f";
    done < <(find $prefix -type l -print0)
}
_makeSymlinksRelativeInAllOutputs ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" _makeSymlinksRelative;
    done
}
_moveLib64 ()
{
 
    if [ "${dontMoveLib64-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/lib64" -o -L "$prefix/lib64" ]; then
        return;
    fi;
    echo "moving $prefix/lib64/* to $prefix/lib";
    mkdir -p $prefix/lib;
    shopt -s dotglob;
    for i in $prefix/lib64/*;
    do
        mv --no-clobber "$i" $prefix/lib;
    done;
    shopt -u dotglob;
    rmdir $prefix/lib64;
    ln -s lib $prefix/lib64
}
_moveSbin ()
{
 
    if [ "${dontMoveSbin-}" = 1 ]; then
        return;
    fi;
    if [ ! -e "$prefix/sbin" -o -L "$prefix/sbin" ]; then
        return;
    fi;
    echo "moving $prefix/sbin/* to $prefix/bin";
    mkdir -p $prefix/bin;
    shopt -s dotglob;
    for i in $prefix/sbin/*;
    do
        mv "$i" $prefix/bin;
    done;
    shopt -u dotglob;
    rmdir $prefix/sbin;
    ln -s bin $prefix/sbin
}
_moveSystemdUserUnits ()
{
 
    if [ "${dontMoveSystemdUserUnits:-0}" = 1 ]; then
        return;
    fi;
    if [ ! -e "${prefix:?}/lib/systemd/user" ]; then
        return;
    fi;
    local source="$prefix/lib/systemd/user";
    local target="$prefix/share/systemd/user";
    echo "moving $source/* to $target";
    mkdir -p "$target";
    ( shopt -s dotglob;
    for i in "$source"/*;
    do
        mv "$i" "$target";
    done );
    rmdir "$source";
    ln -s "$target" "$source"
}
_moveToShare ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        if [ -z "${forceShare-}" ]; then
            forceShare=(man doc info);
        fi;
    else
        forceShare=(${forceShare:-man doc info});
    fi;
    if [[ -z "$out" ]]; then
        return;
    fi;
    for d in "${forceShare[@]}";
    do
        if [ -d "$out/$d" ]; then
            if [ -d "$out/share/$d" ]; then
                echo "both $d/ and share/$d/ exist!";
            else
                echo "moving $out/$d to $out/share/$d";
                mkdir -p $out/share;
                mv $out/$d $out/share/;
            fi;
        fi;
    done
}
_multioutConfig ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${setOutputFlags-1}" ]; then
        return;
    fi;
    if [ -z "${shareDocName:-}" ]; then
        local confScript="${configureScript:-}";
        if [ -z "$confScript" ] && [ -x ./configure ]; then
            confScript=./configure;
        fi;
        if [ -f "$confScript" ]; then
            local shareDocName="$(sed -n "s/^PACKAGE_TARNAME='\(.*\)'$/\1/p" < "$confScript")";
        fi;
        if [ -z "$shareDocName" ] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_-]'; then
            shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
        fi;
    fi;
    prependToVar configureFlags --bindir="${!outputBin}"/bin --sbindir="${!outputBin}"/sbin --includedir="${!outputInclude}"/include --mandir="${!outputMan}"/share/man --infodir="${!outputInfo}"/share/info --docdir="${!outputDoc}"/share/doc/"${shareDocName}" --libdir="${!outputLib}"/lib --libexecdir="${!outputLib}"/libexec --localedir="${!outputLib}"/share/locale;
    prependToVar installFlags pkgconfigdir="${!outputDev}"/lib/pkgconfig m4datadir="${!outputDev}"/share/aclocal aclocaldir="${!outputDev}"/share/aclocal
}
_multioutDevs ()
{
 
    if [ "$(getAllOutputNames)" = "out" ] || [ -z "${moveToDev-1}" ]; then
        return;
    fi;
    moveToOutput include "${!outputInclude}";
    moveToOutput lib/pkgconfig "${!outputDev}";
    moveToOutput share/pkgconfig "${!outputDev}";
    moveToOutput lib/cmake "${!outputDev}";
    moveToOutput share/aclocal "${!outputDev}";
    for f in "${!outputDev}"/{lib,share}/pkgconfig/*.pc;
    do
        echo "Patching '$f' includedir to output ${!outputInclude}";
        sed -i "/^includedir=/s,=\${prefix},=${!outputInclude}," "$f";
    done
}
_multioutDocs ()
{
 
    local REMOVE=REMOVE;
    moveToOutput share/info "${!outputInfo}";
    moveToOutput share/doc "${!outputDoc}";
    moveToOutput share/gtk-doc "${!outputDevdoc}";
    moveToOutput share/devhelp/books "${!outputDevdoc}";
    moveToOutput share/man "${!outputMan}";
    moveToOutput share/man/man3 "${!outputDevman}"
}
_multioutPropagateDev ()
{
 
    if [ "$(getAllOutputNames)" = "out" ]; then
        return;
    fi;
    local outputFirst;
    for outputFirst in $(getAllOutputNames);
    do
        break;
    done;
    local propagaterOutput="$outputDev";
    if [ -z "$propagaterOutput" ]; then
        propagaterOutput="$outputFirst";
    fi;
    if [ -z "${propagatedBuildOutputs+1}" ]; then
        local po_dirty="$outputBin $outputInclude $outputLib";
        set +o pipefail;
        propagatedBuildOutputs=`echo "$po_dirty"             | tr -s ' ' '\n' | grep -v -F "$propagaterOutput"             | sort -u | tr '\n' ' ' `;
        set -o pipefail;
    fi;
    if [ -z "$propagatedBuildOutputs" ]; then
        return;
    fi;
    mkdir -p "${!propagaterOutput}"/nix-support;
    for output in $propagatedBuildOutputs;
    do
        echo -n " ${!output}" >> "${!propagaterOutput}"/nix-support/propagated-build-inputs;
    done
}
_nixLogWithLevel ()
{
 
    [[ -z ${NIX_LOG_FD-} || ${NIX_DEBUG:-0} -lt ${1:?} ]] && return 0;
    local logLevel;
    case "${1:?}" in 
        0)
            logLevel=ERROR
        ;;
        1)
            logLevel=WARN
        ;;
        2)
            logLevel=NOTICE
        ;;
        3)
            logLevel=INFO
        ;;
        4)
            logLevel=TALKATIVE
        ;;
        5)
            logLevel=CHATTY
        ;;
        6)
            logLevel=DEBUG
        ;;
        7)
            logLevel=VOMIT
        ;;
        *)
            echo "_nixLogWithLevel: called with invalid log level: ${1:?}" >&"$NIX_LOG_FD";
            return 1
        ;;
    esac;
    local callerName="${FUNCNAME[2]}";
    if [[ $callerName == "_callImplicitHook" ]]; then
        callerName="${hookName:?}";
    fi;
    printf "%s: %s: %s\n" "$logLevel" "$callerName" "${2:?}" >&"$NIX_LOG_FD"
}
_overrideFirst ()
{
 
    if [ -z "${!1-}" ]; then
        _assignFirst "$@";
    fi
}
_pruneLibtoolFiles ()
{
 
    if [ "${dontPruneLibtoolFiles-}" ] || [ ! -e "$prefix" ]; then
        return;
    fi;
    find "$prefix" -type f -name '*.la' -exec grep -q '^# Generated by .*libtool' {} \; -exec grep -q "^old_library=''" {} \; -exec sed -i {} -e "/^dependency_libs='[^']/ c dependency_libs='' #pruned" \;
}
_updateSourceDateEpochFromSourceRoot ()
{
 
    if [ -n "$sourceRoot" ]; then
        updateSourceDateEpoch "$sourceRoot";
    fi
}
activatePackage ()
{
 
    local pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    if [ -f "$pkg" ]; then
        nixTalkativeLog "sourcing setup hook '$pkg'";
        source "$pkg";
    fi;
    if [[ -z "${strictDeps-}" || "$hostOffset" -le -1 ]]; then
        addToSearchPath _PATH "$pkg/bin";
    fi;
    if (( hostOffset <= -1 )); then
        addToSearchPath _XDG_DATA_DIRS "$pkg/share";
    fi;
    if [[ "$hostOffset" -eq 0 && -d "$pkg/bin" ]]; then
        addToSearchPath _HOST_PATH "$pkg/bin";
    fi;
    if [[ -f "$pkg/nix-support/setup-hook" ]]; then
        nixTalkativeLog "sourcing setup hook '$pkg/nix-support/setup-hook'";
        source "$pkg/nix-support/setup-hook";
    fi
}
addCMakeParams ()
{
 
    addToSearchPath NIXPKGS_CMAKE_PREFIX_PATH $1
}
addEnvHooks ()
{
 
    local depHostOffset="$1";
    shift;
    local pkgHookVarsSlice="${pkgHookVarVars[$depHostOffset + 1]}[@]";
    local pkgHookVar;
    for pkgHookVar in "${!pkgHookVarsSlice}";
    do
        eval "${pkgHookVar}s"'+=("$@")';
    done
}
addPythonPath ()
{
 
    addToSearchPathWithCustomDelimiter : PYTHONPATH $1/lib/python3.12/site-packages
}
addToSearchPath ()
{
 
    addToSearchPathWithCustomDelimiter ":" "$@"
}
addToSearchPathWithCustomDelimiter ()
{
 
    local delimiter="$1";
    local varName="$2";
    local dir="$3";
    if [[ -d "$dir" && "${!varName:+${delimiter}${!varName}${delimiter}}" != *"${delimiter}${dir}${delimiter}"* ]]; then
        export "${varName}=${!varName:+${!varName}${delimiter}}${dir}";
    fi
}
appendToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "appendToVar(): ERROR: trying to use appendToVar on an associative array, use variable+=([\"X\"]=\"Y\") instead." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=(${nameref+"${nameref[@]}"} "$@");
    else
        nameref="${nameref-} $*";
    fi
}
auditTmpdir ()
{
 
    local dir="$1";
    [ -e "$dir" ] || return 0;
    echo "checking for references to $TMPDIR/ in $dir...";
    local i;
    find "$dir" -type f -print0 | while IFS= read -r -d '' i; do
        if [[ "$i" =~ .build-id ]]; then
            continue;
        fi;
        if isELF "$i"; then
            if { 
                printf :;
                patchelf --print-rpath "$i"
            } | grep -q -F ":$TMPDIR/"; then
                echo "RPATH of binary $i contains a forbidden reference to $TMPDIR/";
                exit 1;
            fi;
        fi;
        if isScript "$i"; then
            if [ -e "$(dirname "$i")/.$(basename "$i")-wrapped" ]; then
                if grep -q -F "$TMPDIR/" "$i"; then
                    echo "wrapper script $i contains a forbidden reference to $TMPDIR/";
                    exit 1;
                fi;
            fi;
        fi;
    done
}
bintoolsWrapper_addLDVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [[ -d "$1/lib64" && ! -L "$1/lib64" ]]; then
        export NIX_LDFLAGS${role_post}+=" -L$1/lib64";
    fi;
    if [[ -d "$1/lib" ]]; then
        local -a glob=($1/lib/lib*);
        if [ "${#glob[*]}" -gt 0 ]; then
            export NIX_LDFLAGS${role_post}+=" -L$1/lib";
        fi;
    fi
}
buildPhase ()
{
 
    runHook preBuild;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom buildPhase, doing nothing";
    else
        foundMakefile=1;
        local flagsArray=(${enableParallelBuilding:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray buildFlags buildFlagsArray;
        echoCmd 'build flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postBuild
}
ccWrapper_addCVars ()
{
 
    local role_post;
    getHostRoleEnvHook;
    if [ -d "$1/include" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -isystem $1/include";
    fi;
    if [ -d "$1/Library/Frameworks" ]; then
        export NIX_CFLAGS_COMPILE${role_post}+=" -iframework $1/Library/Frameworks";
    fi
}
checkPhase ()
{
 
    runHook preCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom checkPhase, doing nothing";
        runHook postCheck;
        return;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        if make -n ${makefile:+-f $makefile} check > /dev/null 2>&1; then
            checkTarget="check";
        else
            if make -n ${makefile:+-f $makefile} test > /dev/null 2>&1; then
                checkTarget="test";
            fi;
        fi;
    fi;
    if [[ -z "${checkTarget:-}" ]]; then
        echo "no check/test target in ${makefile:-Makefile}, doing nothing";
    else
        local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
        concatTo flagsArray makeFlags makeFlagsArray checkFlags=VERBOSE=y checkFlagsArray checkTarget;
        echoCmd 'check flags' "${flagsArray[@]}";
        make ${makefile:+-f $makefile} "${flagsArray[@]}";
        unset flagsArray;
    fi;
    runHook postCheck
}
cmakeConfigurePhase ()
{
 
    runHook preConfigure;
    : ${cmakeBuildDir:=build};
    export CTEST_OUTPUT_ON_FAILURE=1;
    if [ -n "${enableParallelChecking-1}" ]; then
        export CTEST_PARALLEL_LEVEL=$NIX_BUILD_CORES;
    fi;
    if [ -z "${dontFixCmake-}" ]; then
        fixCmakeFiles .;
    fi;
    if [ -z "${dontUseCmakeBuildDir-}" ]; then
        mkdir -p "$cmakeBuildDir";
        cd "$cmakeBuildDir";
        : ${cmakeDir:=..};
    else
        : ${cmakeDir:=.};
    fi;
    if [ -z "${dontAddPrefix-}" ]; then
        prependToVar cmakeFlags "-DCMAKE_INSTALL_PREFIX=$prefix";
    fi;
    prependToVar cmakeFlags "-DCMAKE_CXX_COMPILER=$CXX";
    prependToVar cmakeFlags "-DCMAKE_C_COMPILER=$CC";
    prependToVar cmakeFlags "-DCMAKE_AR=$(command -v $AR)";
    prependToVar cmakeFlags "-DCMAKE_RANLIB=$(command -v $RANLIB)";
    prependToVar cmakeFlags "-DCMAKE_STRIP=$(command -v $STRIP)";
    prependToVar cmakeFlags "-DCMAKE_FIND_FRAMEWORK=LAST";
    prependToVar cmakeFlags "-DCMAKE_POLICY_DEFAULT_CMP0025=NEW";
    prependToVar cmakeFlags "-DCMAKE_INSTALL_NAME_DIR=${!outputLib}/lib";
    if [[ -z "$shareDocName" ]]; then
        local cmakeLists="${cmakeDir}/CMakeLists.txt";
        if [[ -f "$cmakeLists" ]]; then
            local shareDocName="$(grep --only-matching --perl-regexp --ignore-case '\bproject\s*\(\s*"?\K([^[:space:]")]+)' < "$cmakeLists" | head -n1)";
        fi;
        if [[ -z "$shareDocName" ]] || echo "$shareDocName" | grep -q '[^a-zA-Z0-9_+-]'; then
            if [[ -n "${pname-}" ]]; then
                shareDocName="$pname";
            else
                shareDocName="$(echo "$name" | sed 's/-[^a-zA-Z].*//')";
            fi;
        fi;
    fi;
    prependToVar cmakeFlags "-DCMAKE_INSTALL_BINDIR=${!outputBin}/bin";
    prependToVar cmakeFlags "-DCMAKE_INSTALL_SBINDIR=${!outputBin}/sbin";
    prependToVar cmakeFlags "-DCMAKE_INSTALL_INCLUDEDIR=${!outputInclude}/include";
    prependToVar cmakeFlags "-DCMAKE_INSTALL_MANDIR=${!outputMan}/share/man";
    prependToVar cmakeFlags "-DCMAKE_INSTALL_INFODIR=${!outputInfo}/share/info";
    prependToVar cmakeFlags "-DCMAKE_INSTALL_DOCDIR=${!outputDoc}/share/doc/${shareDocName}";
    prependToVar cmakeFlags "-DCMAKE_INSTALL_LIBDIR=${!outputLib}/lib";
    prependToVar cmakeFlags "-DCMAKE_INSTALL_LIBEXECDIR=${!outputLib}/libexec";
    prependToVar cmakeFlags "-DCMAKE_INSTALL_LOCALEDIR=${!outputLib}/share/locale";
    if [ -z "${doCheck-}" ]; then
        prependToVar cmakeFlags "-DBUILD_TESTING=OFF";
    fi;
    prependToVar cmakeFlags "-DCMAKE_BUILD_TYPE=${cmakeBuildType:-Release}";
    prependToVar cmakeFlags "-DCMAKE_EXPORT_NO_PACKAGE_REGISTRY=ON";
    prependToVar cmakeFlags "-DCMAKE_FIND_USE_PACKAGE_REGISTRY=OFF";
    prependToVar cmakeFlags "-DCMAKE_FIND_USE_SYSTEM_PACKAGE_REGISTRY=OFF";
    if [ "${buildPhase-}" = ninjaBuildPhase ]; then
        prependToVar cmakeFlags "-GNinja";
    fi;
    local flagsArray=();
    concatTo flagsArray cmakeFlags cmakeFlagsArray;
    echoCmd 'cmake flags' "${flagsArray[@]}";
    cmake "$cmakeDir" "${flagsArray[@]}";
    if ! [[ -v enableParallelBuilding ]]; then
        enableParallelBuilding=1;
        echo "cmake: enabled parallel building";
    fi;
    if [[ "$enableParallelBuilding" -ne 0 ]]; then
        export CMAKE_BUILD_PARALLEL_LEVEL=$NIX_BUILD_CORES;
    fi;
    if ! [[ -v enableParallelInstalling ]]; then
        enableParallelInstalling=1;
        echo "cmake: enabled parallel installing";
    fi;
    runHook postConfigure
}
cmakePcfileCheckPhase ()
{
 
    while IFS= read -rd '' file; do
        grepout=$(grep --line-number '}//nix/store' "$file" || true);
        if [ -n "$grepout" ]; then
            { 
                echo "Broken paths found in a .pc file! $file";
                echo "The following lines have issues (specifically '//' in paths).";
                echo "$grepout";
                echo "It is very likely that paths are being joined improperly.";
                echo 'ex: "${prefix}/@CMAKE_INSTALL_LIBDIR@" should be "@CMAKE_INSTALL_FULL_LIBDIR@"';
                echo "Please see https://github.com/NixOS/nixpkgs/issues/144170 for more details.";
                exit 1
            } 1>&2;
        fi;
    done < <(find "${!outputDev}" -iname "*.pc" -print0)
}
compressManPages ()
{
 
    local dir="$1";
    if [ -L "$dir"/share ] || [ -L "$dir"/share/man ] || [ ! -d "$dir/share/man" ]; then
        return;
    fi;
    echo "gzipping man pages under $dir/share/man/";
    find "$dir"/share/man/ -type f -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | while IFS= read -r -d '' f; do
        if gzip -c -n "$f" > "$f".gz; then
            rm "$f";
        else
            rm "$f".gz;
        fi;
    done;
    find "$dir"/share/man/ -type l -a '!' -regex '.*\.\(bz2\|gz\|xz\)$' -print0 | sort -z | while IFS= read -r -d '' f; do
        local target;
        target="$(readlink -f "$f")";
        if [ -f "$target".gz ]; then
            ln -sf "$target".gz "$f".gz && rm "$f";
        fi;
    done
}
concatStringsSep ()
{
 
    local sep="$1";
    local name="$2";
    local type oldifs;
    if type=$(declare -p "$name" 2> /dev/null); then
        local -n nameref="$name";
        case "${type#* }" in 
            -A*)
                echo "concatStringsSep(): ERROR: trying to use concatStringsSep on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                local IFS="$(printf '\036')"
            ;;
            *)
                local IFS=" "
            ;;
        esac;
        local ifs_separated="${nameref[*]}";
        echo -n "${ifs_separated//"$IFS"/"$sep"}";
    fi
}
concatTo ()
{
 
    local -;
    set -o noglob;
    local -n targetref="$1";
    shift;
    local arg default name type;
    for arg in "$@";
    do
        IFS="=" read -r name default <<< "$arg";
        local -n nameref="$name";
        if [[ -z "${nameref[*]}" && -n "$default" ]]; then
            targetref+=("$default");
        else
            if type=$(declare -p "$name" 2> /dev/null); then
                case "${type#* }" in 
                    -A*)
                        echo "concatTo(): ERROR: trying to use concatTo on an associative array." 1>&2;
                        return 1
                    ;;
                    -a*)
                        targetref+=("${nameref[@]}")
                    ;;
                    *)
                        if [[ "$name" = *"Array" ]]; then
                            nixErrorLog "concatTo(): $name is not declared as array, treating as a singleton. This will become an error in future";
                            targetref+=(${nameref+"${nameref[@]}"});
                        else
                            targetref+=(${nameref-});
                        fi
                    ;;
                esac;
            fi;
        fi;
    done
}
configurePhase ()
{
 
    runHook preConfigure;
    : "${configureScript=}";
    if [[ -z "$configureScript" && -x ./configure ]]; then
        configureScript=./configure;
    fi;
    if [ -z "${dontFixLibtool:-}" ]; then
        export lt_cv_deplibs_check_method="${lt_cv_deplibs_check_method-pass_all}";
        local i;
        find . -iname "ltmain.sh" -print0 | while IFS='' read -r -d '' i; do
            echo "fixing libtool script $i";
            fixLibtool "$i";
        done;
        CONFIGURE_MTIME_REFERENCE=$(mktemp configure.mtime.reference.XXXXXX);
        find . -executable -type f -name configure -exec grep -l 'GNU Libtool is free software; you can redistribute it and/or modify' {} \; -exec touch -r {} "$CONFIGURE_MTIME_REFERENCE" \; -exec sed -i s_/usr/bin/file_file_g {} \; -exec touch -r "$CONFIGURE_MTIME_REFERENCE" {} \;;
        rm -f "$CONFIGURE_MTIME_REFERENCE";
    fi;
    if [[ -z "${dontAddPrefix:-}" && -n "$prefix" ]]; then
        prependToVar configureFlags "${prefixKey:---prefix=}$prefix";
    fi;
    if [[ -f "$configureScript" ]]; then
        if [ -z "${dontAddDisableDepTrack:-}" ]; then
            if grep -q dependency-tracking "$configureScript"; then
                prependToVar configureFlags --disable-dependency-tracking;
            fi;
        fi;
        if [ -z "${dontDisableStatic:-}" ]; then
            if grep -q enable-static "$configureScript"; then
                prependToVar configureFlags --disable-static;
            fi;
        fi;
        if [ -z "${dontPatchShebangsInConfigure:-}" ]; then
            patchShebangs --build "$configureScript";
        fi;
    fi;
    if [ -n "$configureScript" ]; then
        local -a flagsArray;
        concatTo flagsArray configureFlags configureFlagsArray;
        echoCmd 'configure flags' "${flagsArray[@]}";
        $configureScript "${flagsArray[@]}";
        unset flagsArray;
    else
        echo "no configure script, doing nothing";
    fi;
    runHook postConfigure
}
consumeEntire ()
{
 
    if IFS='' read -r -d '' "$1"; then
        echo "consumeEntire(): ERROR: Input null bytes, won't process" 1>&2;
        return 1;
    fi
}
distPhase ()
{
 
    runHook preDist;
    local flagsArray=();
    concatTo flagsArray distFlags distFlagsArray distTarget=dist;
    echo 'dist flags: %q' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    if [ "${dontCopyDist:-0}" != 1 ]; then
        mkdir -p "$out/tarballs";
        cp -pvd ${tarballs[*]:-*.tar.gz} "$out/tarballs";
    fi;
    runHook postDist
}
dumpVars ()
{
 
    if [ "${noDumpEnvVars:-0}" != 1 ]; then
        { 
            install -m 0600 /dev/null "$NIX_BUILD_TOP/env-vars" && export 2> /dev/null >| "$NIX_BUILD_TOP/env-vars"
        } || true;
    fi
}
echoCmd ()
{
 
    printf "%s:" "$1";
    shift;
    printf ' %q' "$@";
    echo
}
exitHandler ()
{
 
    exitCode="$?";
    set +e;
    if [ -n "${showBuildStats:-}" ]; then
        read -r -d '' -a buildTimes < <(times);
        echo "build times:";
        echo "user time for the shell             ${buildTimes[0]}";
        echo "system time for the shell           ${buildTimes[1]}";
        echo "user time for all child processes   ${buildTimes[2]}";
        echo "system time for all child processes ${buildTimes[3]}";
    fi;
    if (( "$exitCode" != 0 )); then
        runHook failureHook;
        if [ -n "${succeedOnFailure:-}" ]; then
            echo "build failed with exit code $exitCode (ignored)";
            mkdir -p "$out/nix-support";
            printf "%s" "$exitCode" > "$out/nix-support/failed";
            exit 0;
        fi;
    else
        runHook exitHook;
    fi;
    return "$exitCode"
}
findInputs ()
{
 
    local -r pkg="$1";
    local -r hostOffset="$2";
    local -r targetOffset="$3";
    (( hostOffset <= targetOffset )) || exit 1;
    local varVar="${pkgAccumVarVars[hostOffset + 1]}";
    local varRef="$varVar[$((targetOffset - hostOffset))]";
    local var="${!varRef}";
    unset -v varVar varRef;
    local varSlice="$var[*]";
    case " ${!varSlice-} " in 
        *" $pkg "*)
            return 0
        ;;
    esac;
    unset -v varSlice;
    eval "$var"'+=("$pkg")';
    if ! [ -e "$pkg" ]; then
        echo "build input $pkg does not exist" 1>&2;
        exit 1;
    fi;
    function mapOffset () 
    { 
        local -r inputOffset="$1";
        local -n outputOffset="$2";
        if (( inputOffset <= 0 )); then
            outputOffset=$((inputOffset + hostOffset));
        else
            outputOffset=$((inputOffset - 1 + targetOffset));
        fi
    };
    local relHostOffset;
    for relHostOffset in "${allPlatOffsets[@]}";
    do
        local files="${propagatedDepFilesVars[relHostOffset + 1]}";
        local hostOffsetNext;
        mapOffset "$relHostOffset" hostOffsetNext;
        (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
        local relTargetOffset;
        for relTargetOffset in "${allPlatOffsets[@]}";
        do
            (( "$relHostOffset" <= "$relTargetOffset" )) || continue;
            local fileRef="${files}[$relTargetOffset - $relHostOffset]";
            local file="${!fileRef}";
            unset -v fileRef;
            local targetOffsetNext;
            mapOffset "$relTargetOffset" targetOffsetNext;
            (( -1 <= hostOffsetNext && hostOffsetNext <= 1 )) || continue;
            [[ -f "$pkg/nix-support/$file" ]] || continue;
            local pkgNext;
            read -r -d '' pkgNext < "$pkg/nix-support/$file" || true;
            for pkgNext in $pkgNext;
            do
                findInputs "$pkgNext" "$hostOffsetNext" "$targetOffsetNext";
            done;
        done;
    done
}
fixCmakeFiles ()
{
 
    echo "fixing cmake files...";
    find "$1" -type f \( -name "*.cmake" -o -name "*.cmake.in" -o -name CMakeLists.txt \) -print | while read fn; do
        sed -e 's^/usr\([ /]\|$\)^/var/empty\1^g' -e 's^/opt\([ /]\|$\)^/var/empty\1^g' < "$fn" > "$fn.tmp";
        mv "$fn.tmp" "$fn";
    done
}
fixLibtool ()
{
 
    local search_path;
    for flag in $NIX_LDFLAGS;
    do
        case $flag in 
            -L*)
                search_path+=" ${flag#-L}"
            ;;
        esac;
    done;
    sed -i "$1" -e "s^eval \(sys_lib_search_path=\).*^\1'${search_path:-}'^" -e 's^eval sys_lib_.+search_path=.*^^'
}
fixupPhase ()
{
 
    local output;
    for output in $(getAllOutputNames);
    do
        if [ -e "${!output}" ]; then
            chmod -R u+w,u-s,g-s "${!output}";
        fi;
    done;
    runHook preFixup;
    local output;
    for output in $(getAllOutputNames);
    do
        prefix="${!output}" runHook fixupOutput;
    done;
    recordPropagatedDependencies;
    if [ -n "${setupHook:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        substituteAll "$setupHook" "${!outputDev}/nix-support/setup-hook";
    fi;
    if [ -n "${setupHooks:-}" ]; then
        mkdir -p "${!outputDev}/nix-support";
        local hook;
        for hook in ${setupHooks[@]};
        do
            local content;
            consumeEntire content < "$hook";
            substituteAllStream content "file '$hook'" >> "${!outputDev}/nix-support/setup-hook";
            unset -v content;
        done;
        unset -v hook;
    fi;
    if [ -n "${propagatedUserEnvPkgs[*]:-}" ]; then
        mkdir -p "${!outputBin}/nix-support";
        printWords "${propagatedUserEnvPkgs[@]}" > "${!outputBin}/nix-support/propagated-user-env-packages";
    fi;
    runHook postFixup
}
genericBuild ()
{
 
    export GZIP_NO_TIMESTAMPS=1;
    if [ -f "${buildCommandPath:-}" ]; then
        source "$buildCommandPath";
        return;
    fi;
    if [ -n "${buildCommand:-}" ]; then
        eval "$buildCommand";
        return;
    fi;
    if [ -z "${phases[*]:-}" ]; then
        phases="${prePhases[*]:-} unpackPhase patchPhase ${preConfigurePhases[*]:-}             configurePhase ${preBuildPhases[*]:-} buildPhase checkPhase             ${preInstallPhases[*]:-} installPhase ${preFixupPhases[*]:-} fixupPhase installCheckPhase             ${preDistPhases[*]:-} distPhase ${postPhases[*]:-}";
    fi;
    for curPhase in ${phases[*]};
    do
        runPhase "$curPhase";
    done
}
getAllOutputNames ()
{
 
    if [ -n "$__structuredAttrs" ]; then
        echo "${!outputs[*]}";
    else
        echo "$outputs";
    fi
}
getHostRole ()
{
 
    getRole "$hostOffset"
}
getHostRoleEnvHook ()
{
 
    getRole "$depHostOffset"
}
getRole ()
{
 
    case $1 in 
        -1)
            role_post='_FOR_BUILD'
        ;;
        0)
            role_post=''
        ;;
        1)
            role_post='_FOR_TARGET'
        ;;
        *)
            echo "apple-sdk-11.3: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
getTargetRole ()
{
 
    getRole "$targetOffset"
}
getTargetRoleEnvHook ()
{
 
    getRole "$depTargetOffset"
}
getTargetRoleWrapper ()
{
 
    case $targetOffset in 
        -1)
            export NIX_@wrapperName@_TARGET_BUILD_@suffixSalt@=1
        ;;
        0)
            export NIX_@wrapperName@_TARGET_HOST_@suffixSalt@=1
        ;;
        1)
            export NIX_@wrapperName@_TARGET_TARGET_@suffixSalt@=1
        ;;
        *)
            echo "apple-sdk-11.3: used as improper sort of dependency" 1>&2;
            return 1
        ;;
    esac
}
installCheckPhase ()
{
 
    runHook preInstallCheck;
    if [[ -z "${foundMakefile:-}" ]]; then
        echo "no Makefile or custom installCheckPhase, doing nothing";
    else
        if [[ -z "${installCheckTarget:-}" ]] && ! make -n ${makefile:+-f $makefile} "${installCheckTarget:-installcheck}" > /dev/null 2>&1; then
            echo "no installcheck target in ${makefile:-Makefile}, doing nothing";
        else
            local flagsArray=(${enableParallelChecking:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
            concatTo flagsArray makeFlags makeFlagsArray installCheckFlags installCheckFlagsArray installCheckTarget=installcheck;
            echoCmd 'installcheck flags' "${flagsArray[@]}";
            make ${makefile:+-f $makefile} "${flagsArray[@]}";
            unset flagsArray;
        fi;
    fi;
    runHook postInstallCheck
}
installPhase ()
{
 
    runHook preInstall;
    if [[ -z "${makeFlags-}" && -z "${makefile:-}" && ! ( -e Makefile || -e makefile || -e GNUmakefile ) ]]; then
        echo "no Makefile or custom installPhase, doing nothing";
        runHook postInstall;
        return;
    else
        foundMakefile=1;
    fi;
    if [ -n "$prefix" ]; then
        mkdir -p "$prefix";
    fi;
    local flagsArray=(${enableParallelInstalling:+-j${NIX_BUILD_CORES}} SHELL="$SHELL");
    concatTo flagsArray makeFlags makeFlagsArray installFlags installFlagsArray installTargets=install;
    echoCmd 'install flags' "${flagsArray[@]}";
    make ${makefile:+-f $makefile} "${flagsArray[@]}";
    unset flagsArray;
    runHook postInstall
}
isELF ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [ "$magic" = 'ELF' ]; then
        return 0;
    else
        return 1;
    fi
}
isMachO ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 4 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xcf") || "$magic" = $(echo -ne "\xcf\xfa\xed\xfe") ]]; then
        return 0;
    else
        if [[ "$magic" = $(echo -ne "\xfe\xed\xfa\xce") || "$magic" = $(echo -ne "\xce\xfa\xed\xfe") ]]; then
            return 0;
        else
            if [[ "$magic" = $(echo -ne "\xca\xfe\xba\xbe") || "$magic" = $(echo -ne "\xbe\xba\xfe\xca") ]]; then
                return 0;
            else
                return 1;
            fi;
        fi;
    fi
}
isScript ()
{
 
    local fn="$1";
    local fd;
    local magic;
    exec {fd}< "$fn";
    read -r -n 2 -u "$fd" magic;
    exec {fd}>&-;
    if [[ "$magic" =~ \#! ]]; then
        return 0;
    else
        return 1;
    fi
}
makeCmakeFindLibs ()
{
 
    isystem_seen=;
    iframework_seen=;
    for flag in ${NIX_CFLAGS_COMPILE-} ${NIX_LDFLAGS-};
    do
        if test -n "$isystem_seen" && test -d "$flag"; then
            isystem_seen=;
            addToSearchPath CMAKE_INCLUDE_PATH "${flag}";
        else
            if test -n "$iframework_seen" && test -d "$flag"; then
                iframework_seen=;
                addToSearchPath CMAKE_FRAMEWORK_PATH "${flag}";
            else
                isystem_seen=;
                iframework_seen=;
                case $flag in 
                    -I*)
                        addToSearchPath CMAKE_INCLUDE_PATH "${flag:2}"
                    ;;
                    -L*)
                        addToSearchPath CMAKE_LIBRARY_PATH "${flag:2}"
                    ;;
                    -F*)
                        addToSearchPath CMAKE_FRAMEWORK_PATH "${flag:2}"
                    ;;
                    -isystem)
                        isystem_seen=1
                    ;;
                    -iframework)
                        iframework_seen=1
                    ;;
                esac;
            fi;
        fi;
    done
}
mapOffset ()
{
 
    local -r inputOffset="$1";
    local -n outputOffset="$2";
    if (( inputOffset <= 0 )); then
        outputOffset=$((inputOffset + hostOffset));
    else
        outputOffset=$((inputOffset - 1 + targetOffset));
    fi
}
moveToOutput ()
{
 
    local patt="$1";
    local dstOut="$2";
    local output;
    for output in $(getAllOutputNames);
    do
        if [ "${!output}" = "$dstOut" ]; then
            continue;
        fi;
        local srcPath;
        for srcPath in "${!output}"/$patt;
        do
            if [ ! -e "$srcPath" ] && [ ! -L "$srcPath" ]; then
                continue;
            fi;
            if [ "$dstOut" = REMOVE ]; then
                echo "Removing $srcPath";
                rm -r "$srcPath";
            else
                local dstPath="$dstOut${srcPath#${!output}}";
                echo "Moving $srcPath to $dstPath";
                if [ -d "$dstPath" ] && [ -d "$srcPath" ]; then
                    rmdir "$srcPath" --ignore-fail-on-non-empty;
                    if [ -d "$srcPath" ]; then
                        mv -t "$dstPath" "$srcPath"/*;
                        rmdir "$srcPath";
                    fi;
                else
                    mkdir -p "$(readlink -m "$dstPath/..")";
                    mv "$srcPath" "$dstPath";
                fi;
            fi;
            local srcParent="$(readlink -m "$srcPath/..")";
            if [ -n "$(find "$srcParent" -maxdepth 0 -type d -empty 2> /dev/null)" ]; then
                echo "Removing empty $srcParent/ and (possibly) its parents";
                rmdir -p --ignore-fail-on-non-empty "$srcParent" 2> /dev/null || true;
            fi;
        done;
    done
}
ninjaBuildPhase ()
{
 
    runHook preBuild;
    local buildCores=1;
    if [ "${enableParallelBuilding-1}" ]; then
        buildCores="$NIX_BUILD_CORES";
    fi;
    local flagsArray=("-j$buildCores");
    concatTo flagsArray ninjaFlags ninjaFlagsArray;
    echoCmd 'build flags' "${flagsArray[@]}";
    TERM=dumb ninja "${flagsArray[@]}";
    runHook postBuild
}
ninjaCheckPhase ()
{
 
    runHook preCheck;
    if [ -z "${checkTarget:-}" ]; then
        if ninja -t query test > /dev/null 2>&1; then
            checkTarget="test";
        fi;
    fi;
    if [ -z "${checkTarget:-}" ]; then
        echo "no test target found in ninja, doing nothing";
    else
        local buildCores=1;
        if [ "${enableParallelChecking-1}" ]; then
            buildCores="$NIX_BUILD_CORES";
        fi;
        local flagsArray=("-j$buildCores");
        concatTo flagsArray ninjaFlags ninjaFlagsArray checkTarget;
        echoCmd 'check flags' "${flagsArray[@]}";
        TERM=dumb ninja "${flagsArray[@]}";
    fi;
    runHook postCheck
}
ninjaInstallPhase ()
{
 
    runHook preInstall;
    local buildCores=1;
    if [ "${enableParallelInstalling-1}" ]; then
        buildCores="$NIX_BUILD_CORES";
    fi;
    local flagsArray=("-j$buildCores");
    concatTo flagsArray ninjaFlags ninjaFlagsArray installTargets=install;
    echoCmd 'install flags' "${flagsArray[@]}";
    TERM=dumb ninja "${flagsArray[@]}";
    runHook postInstall
}
nixChattyLog ()
{
 
    _nixLogWithLevel 5 "$*"
}
nixDebugLog ()
{
 
    _nixLogWithLevel 6 "$*"
}
nixErrorLog ()
{
 
    _nixLogWithLevel 0 "$*"
}
nixInfoLog ()
{
 
    _nixLogWithLevel 3 "$*"
}
nixLog ()
{
 
    [[ -z ${NIX_LOG_FD-} ]] && return 0;
    local callerName="${FUNCNAME[1]}";
    if [[ $callerName == "_callImplicitHook" ]]; then
        callerName="${hookName:?}";
    fi;
    printf "%s: %s\n" "$callerName" "$*" >&"$NIX_LOG_FD"
}
nixNoticeLog ()
{
 
    _nixLogWithLevel 2 "$*"
}
nixTalkativeLog ()
{
 
    _nixLogWithLevel 4 "$*"
}
nixVomitLog ()
{
 
    _nixLogWithLevel 7 "$*"
}
nixWarnLog ()
{
 
    _nixLogWithLevel 1 "$*"
}
noBrokenSymlinks ()
{
 
    local -r output="${1:?}";
    local path;
    local pathParent;
    local symlinkTarget;
    local -i numDanglingSymlinks=0;
    local -i numReflexiveSymlinks=0;
    local -i numUnreadableSymlinks=0;
    if [[ ! -e $output ]]; then
        nixWarnLog "skipping non-existent output $output";
        return 0;
    fi;
    nixInfoLog "running on $output";
    while IFS= read -r -d '' path; do
        pathParent="$(dirname "$path")";
        if ! symlinkTarget="$(readlink "$path")"; then
            nixErrorLog "the symlink $path is unreadable";
            numUnreadableSymlinks+=1;
            continue;
        fi;
        if [[ $symlinkTarget == /* ]]; then
            nixInfoLog "symlink $path points to absolute target $symlinkTarget";
        else
            nixInfoLog "symlink $path points to relative target $symlinkTarget";
            symlinkTarget="$(realpath --no-symlinks --canonicalize-missing "$pathParent/$symlinkTarget")";
        fi;
        if [[ $symlinkTarget != "$NIX_STORE"/* ]]; then
            nixInfoLog "symlink $path points outside the Nix store; ignoring";
            continue;
        fi;
        if [[ $path == "$symlinkTarget" ]]; then
            nixErrorLog "the symlink $path is reflexive";
            numReflexiveSymlinks+=1;
        else
            if [[ ! -e $symlinkTarget ]]; then
                nixErrorLog "the symlink $path points to a missing target: $symlinkTarget";
                numDanglingSymlinks+=1;
            else
                nixDebugLog "the symlink $path is irreflexive and points to a target which exists";
            fi;
        fi;
    done < <(find "$output" -type l -print0);
    if ((numDanglingSymlinks > 0 || numReflexiveSymlinks > 0 || numUnreadableSymlinks > 0)); then
        nixErrorLog "found $numDanglingSymlinks dangling symlinks, $numReflexiveSymlinks reflexive symlinks and $numUnreadableSymlinks unreadable symlinks";
        exit 1;
    fi;
    return 0
}
noBrokenSymlinksInAllOutputs ()
{
 
    if [[ -z ${dontCheckForBrokenSymlinks-} ]]; then
        for output in $(getAllOutputNames);
        do
            noBrokenSymlinks "${!output}";
        done;
    fi
}
patchPhase ()
{
 
    runHook prePatch;
    local -a patchesArray;
    concatTo patchesArray patches;
    for i in "${patchesArray[@]}";
    do
        echo "applying patch $i";
        local uncompress=cat;
        case "$i" in 
            *.gz)
                uncompress="gzip -d"
            ;;
            *.bz2)
                uncompress="bzip2 -d"
            ;;
            *.xz)
                uncompress="xz -d"
            ;;
            *.lzma)
                uncompress="lzma -d"
            ;;
        esac;
        local -a flagsArray;
        concatTo flagsArray patchFlags=-p1;
        $uncompress < "$i" 2>&1 | patch "${flagsArray[@]}";
    done;
    runHook postPatch
}
patchShebangs ()
{
 
    local pathName;
    local update=false;
    while [[ $# -gt 0 ]]; do
        case "$1" in 
            --host)
                pathName=HOST_PATH;
                shift
            ;;
            --build)
                pathName=PATH;
                shift
            ;;
            --update)
                update=true;
                shift
            ;;
            --)
                shift;
                break
            ;;
            -* | --*)
                echo "Unknown option $1 supplied to patchShebangs" 1>&2;
                return 1
            ;;
            *)
                break
            ;;
        esac;
    done;
    echo "patching script interpreter paths in $@";
    local f;
    local oldPath;
    local newPath;
    local arg0;
    local args;
    local oldInterpreterLine;
    local newInterpreterLine;
    if [[ $# -eq 0 ]]; then
        echo "No arguments supplied to patchShebangs" 1>&2;
        return 0;
    fi;
    local f;
    while IFS= read -r -d '' f; do
        isScript "$f" || continue;
        read -r oldInterpreterLine < "$f" || [ "$oldInterpreterLine" ];
        read -r oldPath arg0 args <<< "${oldInterpreterLine:2}";
        if [[ -z "${pathName:-}" ]]; then
            if [[ -n $strictDeps && $f == "$NIX_STORE"* ]]; then
                pathName=HOST_PATH;
            else
                pathName=PATH;
            fi;
        fi;
        if [[ "$oldPath" == *"/bin/env" ]]; then
            if [[ $arg0 == "-S" ]]; then
                arg0=${args%% *};
                [[ "$args" == *" "* ]] && args=${args#* } || args=;
                newPath="$(PATH="${!pathName}" type -P "env" || true)";
                args="-S $(PATH="${!pathName}" type -P "$arg0" || true) $args";
            else
                if [[ $arg0 == "-"* || $arg0 == *"="* ]]; then
                    echo "$f: unsupported interpreter directive \"$oldInterpreterLine\" (set dontPatchShebangs=1 and handle shebang patching yourself)" 1>&2;
                    exit 1;
                else
                    newPath="$(PATH="${!pathName}" type -P "$arg0" || true)";
                fi;
            fi;
        else
            if [[ -z $oldPath ]]; then
                oldPath="/bin/sh";
            fi;
            newPath="$(PATH="${!pathName}" type -P "$(basename "$oldPath")" || true)";
            args="$arg0 $args";
        fi;
        newInterpreterLine="$newPath $args";
        newInterpreterLine=${newInterpreterLine%${newInterpreterLine##*[![:space:]]}};
        if [[ -n "$oldPath" && ( "$update" == true || "${oldPath:0:${#NIX_STORE}}" != "$NIX_STORE" ) ]]; then
            if [[ -n "$newPath" && "$newPath" != "$oldPath" ]]; then
                echo "$f: interpreter directive changed from \"$oldInterpreterLine\" to \"$newInterpreterLine\"";
                escapedInterpreterLine=${newInterpreterLine//\\/\\\\};
                timestamp=$(stat --printf "%y" "$f");
                sed -i -e "1 s|.*|#\!$escapedInterpreterLine|" "$f";
                touch --date "$timestamp" "$f";
            fi;
        fi;
    done < <(find "$@" -type f -perm -0100 -print0)
}
patchShebangsAuto ()
{
 
    if [[ -z "${dontPatchShebangs-}" && -e "$prefix" ]]; then
        if [[ "$output" != out && "$output" = "$outputDev" ]]; then
            patchShebangs --build "$prefix";
        else
            patchShebangs --host "$prefix";
        fi;
    fi
}
pkgConfigWrapper_addPkgConfigPath ()
{
 
    local role_post;
    getHostRoleEnvHook;
    addToSearchPath "PKG_CONFIG_PATH${role_post}" "$1/lib/pkgconfig";
    addToSearchPath "PKG_CONFIG_PATH${role_post}" "$1/share/pkgconfig"
}
prependToVar ()
{
 
    local -n nameref="$1";
    local useArray type;
    if [ -n "$__structuredAttrs" ]; then
        useArray=true;
    else
        useArray=false;
    fi;
    if type=$(declare -p "$1" 2> /dev/null); then
        case "${type#* }" in 
            -A*)
                echo "prependToVar(): ERROR: trying to use prependToVar on an associative array." 1>&2;
                return 1
            ;;
            -a*)
                useArray=true
            ;;
            *)
                useArray=false
            ;;
        esac;
    fi;
    shift;
    if $useArray; then
        nameref=("$@" ${nameref+"${nameref[@]}"});
    else
        nameref="$* ${nameref-}";
    fi
}
printLines ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s\n' "$@"
}
printWords ()
{
 
    (( "$#" > 0 )) || return 0;
    printf '%s ' "$@"
}
recordPropagatedDependencies ()
{
 
    declare -ra flatVars=(depsBuildBuildPropagated propagatedNativeBuildInputs depsBuildTargetPropagated depsHostHostPropagated propagatedBuildInputs depsTargetTargetPropagated);
    declare -ra flatFiles=("${propagatedBuildDepFiles[@]}" "${propagatedHostDepFiles[@]}" "${propagatedTargetDepFiles[@]}");
    local propagatedInputsIndex;
    for propagatedInputsIndex in "${!flatVars[@]}";
    do
        local propagatedInputsSlice="${flatVars[$propagatedInputsIndex]}[@]";
        local propagatedInputsFile="${flatFiles[$propagatedInputsIndex]}";
        [[ -n "${!propagatedInputsSlice}" ]] || continue;
        mkdir -p "${!outputDev}/nix-support";
        printWords ${!propagatedInputsSlice} > "${!outputDev}/nix-support/$propagatedInputsFile";
    done
}
runHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook;
    for hook in "_callImplicitHook 0 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        _eval "$hook" "$@";
    done;
    return 0
}
runOneHook ()
{
 
    local hookName="$1";
    shift;
    local hooksSlice="${hookName%Hook}Hooks[@]";
    local hook ret=1;
    for hook in "_callImplicitHook 1 $hookName" ${!hooksSlice+"${!hooksSlice}"};
    do
        _logHook "$hookName" "$hook" "$@";
        if _eval "$hook" "$@"; then
            ret=0;
            break;
        fi;
    done;
    return "$ret"
}
runPhase ()
{
 
    local curPhase="$*";
    if [[ "$curPhase" = unpackPhase && -n "${dontUnpack:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = patchPhase && -n "${dontPatch:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = configurePhase && -n "${dontConfigure:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = buildPhase && -n "${dontBuild:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = checkPhase && -z "${doCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installPhase && -n "${dontInstall:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = fixupPhase && -n "${dontFixup:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = installCheckPhase && -z "${doInstallCheck:-}" ]]; then
        return;
    fi;
    if [[ "$curPhase" = distPhase && -z "${doDist:-}" ]]; then
        return;
    fi;
    showPhaseHeader "$curPhase";
    dumpVars;
    local startTime endTime;
    startTime=$(date +"%s");
    eval "${!curPhase:-$curPhase}";
    endTime=$(date +"%s");
    showPhaseFooter "$curPhase" "$startTime" "$endTime";
    if [ "$curPhase" = unpackPhase ]; then
        [ -n "${sourceRoot:-}" ] && chmod +x -- "${sourceRoot}";
        cd -- "${sourceRoot:-.}";
    fi
}
showPhaseFooter ()
{
 
    local phase="$1";
    local startTime="$2";
    local endTime="$3";
    local delta=$(( endTime - startTime ));
    (( delta < 30 )) && return;
    local H=$((delta/3600));
    local M=$((delta%3600/60));
    local S=$((delta%60));
    echo -n "$phase completed in ";
    (( H > 0 )) && echo -n "$H hours ";
    (( M > 0 )) && echo -n "$M minutes ";
    echo "$S seconds"
}
showPhaseHeader ()
{
 
    local phase="$1";
    echo "Running phase: $phase";
    if [[ -z ${NIX_LOG_FD-} ]]; then
        return;
    fi;
    printf "@nix { \"action\": \"setPhase\", \"phase\": \"%s\" }\n" "$phase" >&"$NIX_LOG_FD"
}
stripDirs ()
{
 
    local cmd="$1";
    local ranlibCmd="$2";
    local paths="$3";
    local stripFlags="$4";
    local excludeFlags=();
    local pathsNew=;
    [ -z "$cmd" ] && echo "stripDirs: Strip command is empty" 1>&2 && exit 1;
    [ -z "$ranlibCmd" ] && echo "stripDirs: Ranlib command is empty" 1>&2 && exit 1;
    local pattern;
    if [ -n "${stripExclude:-}" ]; then
        for pattern in "${stripExclude[@]}";
        do
            excludeFlags+=(-a '!' '(' -name "$pattern" -o -wholename "$prefix/$pattern" ')');
        done;
    fi;
    local p;
    for p in ${paths};
    do
        if [ -e "$prefix/$p" ]; then
            pathsNew="${pathsNew} $prefix/$p";
        fi;
    done;
    paths=${pathsNew};
    if [ -n "${paths}" ]; then
        echo "stripping (with command $cmd and flags $stripFlags) in $paths";
        local striperr;
        striperr="$(mktemp --tmpdir="$TMPDIR" 'striperr.XXXXXX')";
        find $paths -type f "${excludeFlags[@]}" -a '!' -path "$prefix/lib/debug/*" -printf '%D-%i,%p\0' | sort -t, -k1,1 -u -z | cut -d, -f2- -z | xargs -r -0 -n1 -P "$NIX_BUILD_CORES" -- $cmd $stripFlags 2> "$striperr" || exit_code=$?;
        [[ "$exit_code" = 123 || -z "$exit_code" ]] || ( cat "$striperr" 1>&2 && exit 1 );
        rm "$striperr";
        find $paths -name '*.a' -type f -exec $ranlibCmd '{}' \; 2> /dev/null;
    fi
}
stripHash ()
{
 
    local strippedName casematchOpt=0;
    strippedName="$(basename -- "$1")";
    shopt -q nocasematch && casematchOpt=1;
    shopt -u nocasematch;
    if [[ "$strippedName" =~ ^[a-z0-9]{32}- ]]; then
        echo "${strippedName:33}";
    else
        echo "$strippedName";
    fi;
    if (( casematchOpt )); then
        shopt -s nocasematch;
    fi
}
substitute ()
{
 
    local input="$1";
    local output="$2";
    shift 2;
    if [ ! -f "$input" ]; then
        echo "substitute(): ERROR: file '$input' does not exist" 1>&2;
        return 1;
    fi;
    local content;
    consumeEntire content < "$input";
    if [ -e "$output" ]; then
        chmod +w "$output";
    fi;
    substituteStream content "file '$input'" "$@" > "$output"
}
substituteAll ()
{
 
    local input="$1";
    local output="$2";
    local -a args=();
    _allFlags;
    substitute "$input" "$output" "${args[@]}"
}
substituteAllInPlace ()
{
 
    local fileName="$1";
    shift;
    substituteAll "$fileName" "$fileName" "$@"
}
substituteAllStream ()
{
 
    local -a args=();
    _allFlags;
    substituteStream "$1" "$2" "${args[@]}"
}
substituteInPlace ()
{
 
    local -a fileNames=();
    for arg in "$@";
    do
        if [[ "$arg" = "--"* ]]; then
            break;
        fi;
        fileNames+=("$arg");
        shift;
    done;
    if ! [[ "${#fileNames[@]}" -gt 0 ]]; then
        echo "substituteInPlace called without any files to operate on (files must come before options!)" 1>&2;
        return 1;
    fi;
    for file in "${fileNames[@]}";
    do
        substitute "$file" "$file" "$@";
    done
}
substituteStream ()
{
 
    local var=$1;
    local description=$2;
    shift 2;
    while (( "$#" )); do
        local replace_mode="$1";
        case "$1" in 
            --replace)
                if ! "$_substituteStream_has_warned_replace_deprecation"; then
                    echo "substituteStream() in derivation $name: WARNING: '--replace' is deprecated, use --replace-{fail,warn,quiet}. ($description)" 1>&2;
                    _substituteStream_has_warned_replace_deprecation=true;
                fi;
                replace_mode='--replace-warn'
            ;&
            --replace-quiet | --replace-warn | --replace-fail)
                pattern="$2";
                replacement="$3";
                shift 3;
                if ! [[ "${!var}" == *"$pattern"* ]]; then
                    if [ "$replace_mode" == --replace-warn ]; then
                        printf "substituteStream() in derivation $name: WARNING: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                    else
                        if [ "$replace_mode" == --replace-fail ]; then
                            printf "substituteStream() in derivation $name: ERROR: pattern %q doesn't match anything in %s\n" "$pattern" "$description" 1>&2;
                            return 1;
                        fi;
                    fi;
                fi;
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var)
                local varName="$2";
                shift 2;
                if ! [[ "$varName" =~ ^[a-zA-Z_][a-zA-Z0-9_]*$ ]]; then
                    echo "substituteStream() in derivation $name: ERROR: substitution variables must be valid Bash names, \"$varName\" isn't." 1>&2;
                    return 1;
                fi;
                if [ -z ${!varName+x} ]; then
                    echo "substituteStream() in derivation $name: ERROR: variable \$$varName is unset" 1>&2;
                    return 1;
                fi;
                pattern="@$varName@";
                replacement="${!varName}";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}'
            ;;
            --subst-var-by)
                pattern="@$2@";
                replacement="$3";
                eval "$var"'=${'"$var"'//"$pattern"/"$replacement"}';
                shift 3
            ;;
            *)
                echo "substituteStream() in derivation $name: ERROR: Invalid command line argument: $1" 1>&2;
                return 1
            ;;
        esac;
    done;
    printf "%s" "${!var}"
}
toPythonPath ()
{
 
    local paths="$1";
    local result=;
    for i in $paths;
    do
        p="$i/lib/python3.12/site-packages";
        result="${result}${result:+:}$p";
    done;
    echo $result
}
unpackFile ()
{
 
    curSrc="$1";
    echo "unpacking source archive $curSrc";
    if ! runOneHook unpackCmd "$curSrc"; then
        echo "do not know how to unpack source archive $curSrc";
        exit 1;
    fi
}
unpackPhase ()
{
 
    runHook preUnpack;
    if [ -z "${srcs:-}" ]; then
        if [ -z "${src:-}" ]; then
            echo 'variable $src or $srcs should point to the source';
            exit 1;
        fi;
        srcs="$src";
    fi;
    local -a srcsArray;
    concatTo srcsArray srcs;
    local dirsBefore="";
    for i in *;
    do
        if [ -d "$i" ]; then
            dirsBefore="$dirsBefore $i ";
        fi;
    done;
    for i in "${srcsArray[@]}";
    do
        unpackFile "$i";
    done;
    : "${sourceRoot=}";
    if [ -n "${setSourceRoot:-}" ]; then
        runOneHook setSourceRoot;
    else
        if [ -z "$sourceRoot" ]; then
            for i in *;
            do
                if [ -d "$i" ]; then
                    case $dirsBefore in 
                        *\ $i\ *)

                        ;;
                        *)
                            if [ -n "$sourceRoot" ]; then
                                echo "unpacker produced multiple directories";
                                exit 1;
                            fi;
                            sourceRoot="$i"
                        ;;
                    esac;
                fi;
            done;
        fi;
    fi;
    if [ -z "$sourceRoot" ]; then
        echo "unpacker appears to have produced no directories";
        exit 1;
    fi;
    echo "source root is $sourceRoot";
    if [ "${dontMakeSourcesWritable:-0}" != 1 ]; then
        chmod -R u+w -- "$sourceRoot";
    fi;
    runHook postUnpack
}
updateAutotoolsGnuConfigScriptsPhase ()
{
 
    if [ -n "${dontUpdateAutotoolsGnuConfigScripts-}" ]; then
        return;
    fi;
    for script in config.sub config.guess;
    do
        for f in $(find . -type f -name "$script");
        do
            echo "Updating Autotools / GNU config script to a newer upstream version: $f";
            cp -f "/nix/store/2kk8q52163n8c4plc2yw1nfypm9drm02-gnu-config-2024-01-01/$script" "$f";
        done;
    done
}
updateSourceDateEpoch ()
{
 
    local path="$1";
    [[ $path == -* ]] && path="./$path";
    local -a res=($(find "$path" -type f -not -newer "$NIX_BUILD_TOP/.." -printf '%T@ "%p"\0' | sort -n --zero-terminated | tail -n1 --zero-terminated | head -c -1));
    local time="${res[0]//\.[0-9]*/}";
    local newestFile="${res[1]}";
    if [ "${time:-0}" -gt "$SOURCE_DATE_EPOCH" ]; then
        echo "setting SOURCE_DATE_EPOCH to timestamp $time of file $newestFile";
        export SOURCE_DATE_EPOCH="$time";
        local now="$(date +%s)";
        if [ "$time" -gt $((now - 60)) ]; then
            echo "warning: file $newestFile may be generated; SOURCE_DATE_EPOCH may be non-deterministic";
        fi;
    fi
}
PATH="$PATH${nix_saved_PATH:+:$nix_saved_PATH}"
XDG_DATA_DIRS="$XDG_DATA_DIRS${nix_saved_XDG_DATA_DIRS:+:$nix_saved_XDG_DATA_DIRS}"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "${shellHook:-}"
